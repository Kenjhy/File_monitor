// Last update transaction car: 2025-03-14 12:25:40.598381
// Total files: 80


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\audit\AuditAwareImpl.java
/===============================================================================

package com.nirsa.solicitud.audit;

import com.nirsa.solicitud.config.CurrentUser;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.AuditorAware;
import org.springframework.stereotype.Component;

import java.util.Optional;

@AllArgsConstructor
@Component("auditAwareImpl")
public class AuditAwareImpl implements AuditorAware<String> {

    private CurrentUser currentUser;
    /**
     * Returns the current auditor of the application.
     *
     * @return the current auditor.
     */
    @Override
    public Optional<String> getCurrentAuditor() {
        return Optional.of(currentUser.getCurrentUser().getIdusuario());
    }
	
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\client\WebClientApiZpl.java
/===============================================================================

package com.nirsa.solicitud.client;

import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.exception.IntegrationZplException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.text.MessageFormat;
import java.io.*;
import java.net.*;

@Getter
@Setter
@Component
@Slf4j
@Tag(name = "WebClient API ZPL", description = "Cliente para interactuar con la API ZPL")
public class WebClientApiZpl {
    public WebClientApiZpl(){

    }

    @Value("${config.baseurl.endpoint.zpl}")
    private String url;

    @Value("${config.baseurl.endpoint.port}")
    private String port;

    private Socket socket = null;
    private DataInputStream input = null;
    private DataOutputStream out = null;

    @Operation(summary = "Previsualizar ZPL", description = "Obtiene una previsualización del ZPL")
    public byte[] preview(String zpl)  {
        HttpResponse<byte[]> response;
        var uri = URI.create(url);
        var request = HttpRequest.newBuilder(uri)
                .POST(HttpRequest.BodyPublishers.ofString(zpl))
                .build();
        var client = HttpClient.newHttpClient();

        try {
            response = client.send(request, HttpResponse.BodyHandlers.ofByteArray());
        } catch (IOException | InterruptedException ex) {
            throw new IntegrationZplException(RequestConstants.MESSAGE_CONNECTION_ZPL_ERROR, ex.getMessage());
        }

        if (response.statusCode() == 200) {
            return response.body();
        } else {
            var codeResponse = MessageFormat.format("{0} statusCode: {1} ", RequestConstants.MESSAGE_CONNECTION_ZPL_ERROR, response.statusCode());
            throw new IntegrationZplException(RequestConstants.MESSAGE_CONNECTION_ZPL_ERROR, codeResponse);
        }
    }

    @Operation(summary = "Imprimir ZPL", description = "Envía el ZPL a la impresora para su impresión")
    public void print(String zpl, String address) throws IOException {

        socket = new Socket(address, Integer.parseInt(port));
        log.info("Connected Host: {} - Port: {}",address,port);

        out = new DataOutputStream(socket.getOutputStream());

        out.writeUTF(zpl);
        log.info("Send zpl to printer {}",address);

        out.close();
        socket.close();

    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\CorsConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

@Configuration
public class CorsConfig {

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\CorsLoggingFilter.java
/===============================================================================

package com.nirsa.solicitud.config;

import jakarta.servlet.*;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.Ordered;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;

import java.io.IOException;

@Component
@Order(Ordered.HIGHEST_PRECEDENCE)
public class CorsLoggingFilter implements Filter {

    private static final Logger logger = LoggerFactory.getLogger(CorsLoggingFilter.class);

    @Override
    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
        HttpServletRequest request = (HttpServletRequest) req;
        HttpServletResponse response = (HttpServletResponse) res;

        logger.info("Logging Request  {} : {}", request.getMethod(), request.getRequestURI());
        logger.info("Origin: {}", request.getHeader("Origin"));
        logger.info("Access-Control-Request-Method: {}", request.getHeader("Access-Control-Request-Method"));
        logger.info("Access-Control-Request-Headers: {}", request.getHeader("Access-Control-Request-Headers"));

        chain.doFilter(req, res);

        logger.info("Logging Response :{}", response.getContentType());
        logger.info("Access-Control-Allow-Origin: {}", response.getHeader("Access-Control-Allow-Origin"));
        logger.info("Access-Control-Allow-Methods: {}", response.getHeader("Access-Control-Allow-Methods"));
        logger.info("Access-Control-Allow-Headers: {}", response.getHeader("Access-Control-Allow-Headers"));
    }

    @Override
    public void init(FilterConfig filterConfig) {}

    @Override
    public void destroy() {}
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\CurrentUser.java
/===============================================================================

package com.nirsa.solicitud.config;

import com.nirsa.solicitud.dto.UserDTO;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.Setter;
import org.springframework.stereotype.Component;


@AllArgsConstructor
@Getter
@Setter
@Component
public class CurrentUser {
    private UserDTO currentUser;
    private String token;

    public CurrentUser() {
        this.currentUser = new UserDTO();
        this.token = "";
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\JacksonConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;
import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer;
import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.time.format.DateTimeFormatter;

@Configuration
public class JacksonConfig {
    @Bean
    public Jackson2ObjectMapperBuilderCustomizer jsonCustomizer() {
        return builder -> {
            builder.simpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
            builder.serializers(new LocalDateSerializer(DateTimeFormatter.ofPattern("yyyy-MM-dd")));
            builder.serializers(new LocalDateTimeSerializer(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss")));
        };
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\SwaggerConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.info.Contact;
import io.swagger.v3.oas.models.info.License;
import io.swagger.v3.oas.models.security.SecurityRequirement;
import io.swagger.v3.oas.models.security.SecurityScheme;
import io.swagger.v3.oas.models.servers.Server;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.util.List;


@Configuration
public class SwaggerConfig {

    @Bean
    public OpenAPI nirsaOpenAPI() {
        Server devServer = new Server();
        devServer.setUrl("/");
        devServer.setDescription("Server");

        Contact contact = new Contact();
        contact.setEmail("desarrollo@nirsa.com");
        contact.setName("Equipo de Desarrollo NIRSA");
        contact.setUrl("https://www.nirsa.com");

        License mitLicense = new License().name("Apache 2.0").url("https://www.apache.org/licenses/LICENSE-2.0");

        Info info = new Info()
                .title("NIRSA Solicitud API")
                .version("1.0.0")
                .contact(contact)
                .description("API para la gestión de solicitudes de etiquetas en NIRSA")
                .license(mitLicense);

        return new OpenAPI()
                .info(info)
                .servers(List.of(devServer))
                .components(new Components().addSecuritySchemes("tokenAuth",
                        new SecurityScheme()
                                .type(SecurityScheme.Type.APIKEY)
                                .in(SecurityScheme.In.HEADER)
                                .name("token")))
                .addSecurityItem(new SecurityRequirement().addList("tokenAuth"));
    }

    @Bean
    public GroupedOpenApi publicApi() {
        return GroupedOpenApi.builder()
                .group("public")
                .pathsToMatch("/api/**")
                .build();
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\UserConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class UserConfig  implements WebMvcConfigurer {

    @Autowired
    private UserInterceptor userInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(userInterceptor);
    }
}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\UserInterceptor.java
/===============================================================================

package com.nirsa.solicitud.config;

import com.nirsa.solicitud.dto.UserDTO;
import com.nirsa.solicitud.service.IUtilityService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;

@AllArgsConstructor
@Component
public class UserInterceptor implements HandlerInterceptor {
    private CurrentUser currentUser;
    private IUtilityService utilityService;

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        String token = null;
        try {
            token = request.getHeader("token");
        } catch(Exception e)
        {}
        UserDTO userdto = utilityService.decodeBodyToken(token);
        currentUser.setCurrentUser(userdto);
        currentUser.setToken(token);

        return true;
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\constants\RequestConstants.java
/===============================================================================

package com.nirsa.solicitud.constants;

public class RequestConstants {

    private RequestConstants() {
        // Constructor privado para evitar instanciación
    }

    // Códigos de estado HTTP
    public static final String STATUS_200 = "200";
    public static final String STATUS_201 = "201";
    public static final String STATUS_400 = "400";
    public static final String STATUS_403 = "403";
    public static final String STATUS_404 = "404";
    public static final String STATUS_500 = "500";

    // Mensajes de éxito
    public static final String MESSAGE_200 = "Request processed successfully";
    public static final String MESSAGE_201 = "Resource created successfully";
    public static final String MESSAGE_LABEL_GENERATED = "Label generated with ID: ";
    public static final String MESSAGE_LABEL_UPDATED = "Label updated successfully";
    public static final String MESSAGE_LABEL_DELETED = "Label deleted successfully";

    // Mensajes de error
    public static final String MESSAGE_400 = "Invalid request data";
    public static final String MESSAGE_403 = "Access Denied";
    public static final String MESSAGE_404 = "Resource not found";
    public static final String MESSAGE_500 = "An error occurred while processing the request";
    public static final String MESSAGE_501 = "An IOException occurred when this was assumed to be impossible.";

    // Mensajes específicos para etiquetas
    public static final String MESSAGE_LABEL_NOT_FOUND = "Label not found";
    public static final String MESSAGE_LABEL_UPDATE_FAILED = "Failed to update label";
    public static final String MESSAGE_LABEL_DELETE_FAILED = "Failed to delete label";
    public static final String MESSAGE_NO_LABELS_FOUND = "No labels found for the given criteria";
    public static final String MESSAGE_LABEL_ALREADY_EXISTS = "Label already exists for order: ";
    public static final String MESSAGE_LABEL_ID_REQUIRED = "Label ID is required for update operation";
    public static final String MESSAGE_CONNECTION_ZPL_ERROR = "Error when try to CONNECT with zpl API";
    public static final String MESSAGE_CONNECTION_PRINT_ERROR_CONNECT = "Error when try to CONNECT with PRINTER";
    public static final String MESSAGE_LABEL_PRINTED = "Labels printed";
    // Nombres de recursos
    public static final String RESOURCE_LABEL = "Label";

    // Nombres de campos
    public static final String FIELD_ID = "id";
    public static final String FIELD_ORDEN_PRODUCCION = "idOrdenProduccion";

    // Otros mensajes o constantes que puedas necesitar
    public static final String DEFAULT_PAGE_NUMBER = "0";
    public static final String DEFAULT_PAGE_SIZE = "10";
    public static final String DEFAULT_SORT_BY = "id";
    public static final String DEFAULT_SORT_DIRECTION = "asc";

    public static final String RESOURCE_TEMPLATE = "Template";
    public static final String MESSAGE_NO_TEMPLATE = "No template exists for this client.";

    public static final String MESSAGE_PRINT_TEST_SUCCESS = "Prueba de impresión realizada con éxito. No se guardaron registros.";
    public static final String MESSAGE_PRINT_SUCCESS = "%d etiquetas fueron impresas en esta sesión. Total de impresiones para esta etiqueta: %d. Etiquetas impresas actualizadas a %d de %d solicitadas.";

    // Transaction Types
// Transaction Types Codes
    public static final Integer TRANSACTION_TYPE_CAR = 0;      // Código interno
    public static final Integer TRANSACTION_TYPE_TUNNEL = 1;   // Código interno

    // Transaction Types IDs (Database)
    public static final Integer TRANSACTION_TYPE_CAR_ID = 1;     // ID en base de datos
    public static final Integer TRANSACTION_TYPE_TUNNEL_ID = 2;  // ID en base de datos

    // Car States
    public static final Integer STATE_INACTIVE_ID = 1;
    public static final Integer STATE_FREE_ID = 2;
    public static final Integer STATE_OPENED_ID = 3;
    public static final Integer STATE_CLOSED_ID = 4;
    public static final Integer STATE_ASSIGNED_ID = 5;
    public static final Integer STATE_DOWNLOADED_ID = 6;
    public static final Integer STATE_MASTERED_ID = 7;
    public static final Integer STATE_CANCELED_ID = 8;
    public static final Integer STATE_INACTIVE_CODE = 0;
    public static final Integer STATE_FREE_CODE = 1;
    public static final Integer STATE_OPENED_CODE = 2;
    public static final Integer STATE_CLOSED_CODE = 3;
    public static final Integer STATE_ASSIGNED_CODE = 4;
    public static final Integer STATE_DOWNLOADED_ID_CODE = 5;
    public static final Integer STATE_MASTERED_ID_CODE = 6;
    public static final Integer STATE_CANCELED_ID_CODE = 7;

    // Tunnel States
    public static final Integer TUNNEL_STATE_INACTIVE_ID = 1;
    public static final Integer TUNNEL_STATE_FREE_ID = 2;
    public static final Integer TUNNEL_STATE_OPENED_ID = 3;
    public static final Integer TUNNEL_STATE_CLOSED_ID = 4;
    public static final Integer TUNNEL_STATE_DOWNLOADED_ID = 5;

    public static final Integer TUNNEL_STATE_INACTIVE_CODE = 0;
    public static final Integer TUNNEL_STATE_FREE_CODE = 1;
    public static final Integer TUNNEL_STATE_OPENED_CODE = 2;
    public static final Integer TUNNEL_STATE_CLOSED_CODE = 3;
    public static final Integer TUNNEL_STATE_DOWNLOADED_CODE = 4;

    // Success Messages
    public static final String MESSAGE_TRANSACTION_CREATED = "Transaction created successfully with ID: ";
    public static final String MESSAGE_CAR_LOADED = "Car loaded successfully";
    public static final String MESSAGE_CAR_CLOSED = "Car closed successfully";
    public static final String MESSAGE_TRANSACTION_CANCELLED = "Transaction cancelled successfully";
    public static final String MESSAGE_BOX_DELETED = "Box deleted successfully";
    public static final String MESSAGE_STATUS_UPDATED = "Status updated successfully";

    // Error Messages
    public static final String ERROR_MAX_BOXES_EXCEEDED = "Maximum box quantity exceeded";
    public static final String ERROR_INVALID_TRANSACTION = "Invalid transaction";
    public static final String ERROR_INVALID_CAR = "Invalid car";
    public static final String ERROR_INVALID_STATE = "Invalid state";
    public static final String ERROR_LABEL_CODE_FORMAT = "Invalid label code format";
    public static final String ERROR_BOX_NOT_FOUND = "Box not found";
    public static final String ERROR_NIRSA_INTEGRATION = "Error in NIRSA integration";
    public static final String ERROR_UNAUTHORIZED_CAR = "Usted no esta autorizado para usar el coche";
    public static final String ERROR_CAR_NOT_FOUND = "Car not found with code: ";
    public static final String ERROR_NON_UNIQUE_RESULT = "Multiple records found when a unique result was expected";
    public static final String ERROR_TRANSACTION_CRITERIA = "combination of companyId, productionDate, turnId and typeTransactionId";
    public static final String ERROR_DUPLICATE_BOX = "Box entry already exists with the same label ID and counter";
    public static final String ERROR_DUPLICATE_KEY = "Duplicate key violation detected in database";

    // Tunnel Messages
    public static final String MESSAGE_TUNNEL_CREATED = "Tunnel created successfully with ID: ";
    public static final String MESSAGE_CAR_ASSIGNED = "Car assigned to tunnel successfully";
    public static final String MESSAGE_TUNNEL_CLOSED = "Tunnel closed successfully";
    public static final String ERROR_TUNNEL_NOT_FOUND = "Tunnel not found with code: ";
    public static final String ERROR_TUNNEL_MAX_CARS = "Maximum car quantity exceeded for tunnel";
    public static final String ERROR_TUNNEL_INVALID_STATE = "Invalid tunnel state";
    public static final String ERROR_TUNNEL_EMPTY = "No cars found in tunnel";

    //Date formats
    public static final String DATE_FORMAT = "dd/MM/yyyy";
    public static final String DATE_TIME_FORMAT = "yyyy-MM-dd'T'HH:mm:ss";
    public static final String ENTITY_NOT_FOUND = "%s not found with %s: %s";
    public static final String TIME_FORMAT = "HH:mm:ss";

    // Unit of measure
    public static final String UM_KG = "KG";
    public static final Double KG_TO_POUNDS = 2.2;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\controller\RequestLabelsController.java
/===============================================================================

package com.nirsa.solicitud.controller;

import com.nirsa.solicitud.config.CurrentUser;
import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.*;
import com.nirsa.solicitud.dto.response.ErrorResponseDto;
import com.nirsa.solicitud.dto.response.ResponseDto;
import com.nirsa.solicitud.exception.ResourceNotFoundException;
import com.nirsa.solicitud.service.IRequestLabelsService;
import com.nirsa.solicitud.service.IUtilityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PageableDefault;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Set;

@RestController
@RequestMapping(path="/api/v1/labels", produces = {MediaType.APPLICATION_JSON_VALUE})
@AllArgsConstructor
@Tag(name = "Labels", description = "API para la gestión de etiquetas")
@CrossOrigin(origins = "*", allowedHeaders = "*")
@SecurityRequirement(name = "tokenAuth")
public class RequestLabelsController {

    private IRequestLabelsService requestLabelsService;
    private IUtilityService utilityService;
    private CurrentUser currentUser;
    private static final Logger logger = LoggerFactory.getLogger(RequestLabelsController.class);

    @Operation(summary = "Generar nuevas etiquetas", description = "Crea nuevas solicitudes de etiquetas basadas en los datos proporcionados")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Etiquetas creadas exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseDto.class))),
            @ApiResponse(responseCode = "400", description = "Datos de solicitud inválidos", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "409", description = "La etiqueta ya existe para esta orden de producción", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "403", description = "Acceso denegado",
                    content = @Content(mediaType = "application/json",
                            schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @PostMapping("/generate")
    public ResponseEntity<ResponseDto> generateLabel(@Valid @RequestBody List<LabelsDTO> labelsDTOList) {
        UserDTO userdto = currentUser.getCurrentUser();
        utilityService.evaluateAuthorization(userdto);
        try {
            List<Integer> labelIds = requestLabelsService.generateLabel(labelsDTOList);
            return ResponseEntity
                    .status(HttpStatus.CREATED)
                    .body(new ResponseDto(RequestConstants.STATUS_201,
                            RequestConstants.MESSAGE_LABEL_GENERATED + labelIds));
        } catch (ResourceNotFoundException e) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(new ResponseDto(RequestConstants.STATUS_400, e.getMessage()));
        } catch (Exception e) {
            return ResponseEntity
                    .status(HttpStatus.INTERNAL_SERVER_ERROR)
                    .body(new ResponseDto(RequestConstants.STATUS_500, RequestConstants.MESSAGE_500));
        }
    }

    @Operation(summary = "Obtener una etiqueta por ID", description = "Recupera los detalles de una etiqueta específica por su ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Etiqueta encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LabelsDTO.class))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping("/{labelId}")
    public ResponseEntity<LabelsDTO> fetchLabel(
            @Parameter(description = "ID de la etiqueta a buscar",  example = "5")
            @PathVariable Integer labelId) {
        LabelsDTO labelsDTO = requestLabelsService.fetchLabel(labelId);
        return ResponseEntity.ok(labelsDTO);
    }

    @Operation(summary = "Actualizar una etiqueta", description = "Actualiza los detalles de una etiqueta existente")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Etiqueta actualizada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseDto.class))),
            @ApiResponse(responseCode = "400", description = "Datos de solicitud inválidos", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @PutMapping("/update")
    public ResponseEntity<ResponseDto> updateLabel(@Valid @RequestBody List<LabelsDTO> labelsDTOlist) {
        UserDTO userdto = currentUser.getCurrentUser();
        logger.info("SOLICITUD RECIBIDA  HEADER TOKEN: " + userdto.toString());
        utilityService.evaluateAuthorization(userdto);
        requestLabelsService.updateLabel(userdto, labelsDTOlist);
         return ResponseEntity.ok(new ResponseDto(RequestConstants.STATUS_200,
                RequestConstants.MESSAGE_LABEL_UPDATED));
    }



    @Operation(summary = "Eliminar una etiqueta por ID", description = "Elimina una etiqueta existente usando su ID")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Etiqueta eliminada exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseDto.class))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @DeleteMapping("/{labelId}")
    public ResponseEntity<ResponseDto> deleteLabel(@PathVariable Integer labelId) {
        requestLabelsService.deleteLabel(labelId);
        return ResponseEntity.ok(new ResponseDto(RequestConstants.STATUS_200,
                RequestConstants.MESSAGE_LABEL_DELETED));
    }

    @GetMapping("/byOrdenProduccion/{idOrdenProduccion}")
    public ResponseEntity<List<LabelsDTO>> fetchLabelsByOrdenProduccion(@PathVariable String idOrdenProduccion) {
        List<LabelsDTO> labels = requestLabelsService.fetchLabelsByOrdenProduccion(idOrdenProduccion);
        return ResponseEntity.ok(labels);
    }

    @GetMapping
    public ResponseEntity<Page<LabelsDTO>> getAllLabels(
            @PageableDefault(size = 10) Pageable pageable ) {
        UserDTO userdto = currentUser.getCurrentUser();
        utilityService.evaluateAuthorization(userdto);
        logger.info("SOLICITUD RECIBIDA  HEADER TOKEN: " + userdto.toString());
        Page<LabelsDTO> labels = requestLabelsService.getAllLabels(pageable);
        return ResponseEntity.ok(labels);
    }

    @Operation(summary = "Obtener órdenes de producción para una máquina específica")
    @ApiResponse(responseCode = "200", description = "Lista de órdenes de producción obtenida con éxito")
    @GetMapping("/production-orders")
    public ResponseEntity<Set<String>> fetchProductionOrders(
            @Parameter(description = "ID de la máquina", example = "M001")
            @RequestParam String idMaquina) {
        return ResponseEntity.ok(requestLabelsService.fetchProductionOrders(idMaquina));
    }

    @Operation(summary = "Obtener proformas para una máquina y orden de producción específicas")
    @ApiResponse(responseCode = "200", description = "Lista de proformas obtenida con éxito")
    @GetMapping("/proformas")
    public ResponseEntity<Set<String>> fetchProformas(
            @Parameter(description = "ID de la máquina", example = "M001")
            @RequestParam String idMaquina,
            @Parameter(description = "ID de la orden de producción", example = "OP-2024-0002")
            @RequestParam String idOrdenProduccion) {
        return ResponseEntity.ok(requestLabelsService.fetchProformas(idMaquina, idOrdenProduccion));
    }


    @Operation(summary = "Obtener detalles de solicitud basados en máquina, orden de producción y proforma")
    @ApiResponse(responseCode = "200", description = "Detalles de solicitud obtenidos con éxito")
    @GetMapping("/request-detail")
    public ResponseEntity<List<LabelsDTO>> fetchRequestDetail(
            @Parameter(description = "ID de la máquina", example = "M001")
            @RequestParam String idMaquina,
            @Parameter(description = "ID de la orden de producción", example = "OP-2024-0002")
            @RequestParam String idOrdenProduccion,
            @Parameter(description = "ID de la proforma", example = "PF-2024-0004")
            @RequestParam String idProformaCabecera) {
        return ResponseEntity.ok(requestLabelsService.fetchRequestDetail(idMaquina, idOrdenProduccion, idProformaCabecera));
    }

    @Operation(summary = "Obtener todas las proformas únicas")
    @ApiResponse(responseCode = "200", description = "Lista de proformas únicas obtenida con éxito")
    @GetMapping("/all-proformas")
    public ResponseEntity<Set<String>> fetchAllProformas() {
        return ResponseEntity.ok(requestLabelsService.fetchAllProformas());
    }

    @Operation(summary = "Obtener etiquetas por fecha de producción y estado", description = "Recupera las etiquetas con una fecha de producción y estado específicos")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Etiquetas encontradas", content = @Content(mediaType = "application/json", schema = @Schema(implementation = LabelsDTO.class))),
            @ApiResponse(responseCode = "404", description = "No se encontraron etiquetas con esa fecha y estado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping("/byDateAndStatus")
    public ResponseEntity<List<LabelsDTO>> fetchLabelsByProductionDateAndStatus(
            @Parameter(description = "Fecha de producción de las etiquetas a buscar", example = "2023-09-01")
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate fechaProduccion,
            @Parameter(description = "Estado de las etiquetas a buscar", example = "Solicitado")
            @RequestParam String status) {
        try {
            List<LabelsDTO> labels = requestLabelsService.fetchLabelsByProductionDateAndStatus(fechaProduccion, status);
            return ResponseEntity.ok(labels);
        } catch (ResourceNotFoundException e) {
            return ResponseEntity.notFound().build();
        }
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\controller\RequestPrintController.java
/===============================================================================

package com.nirsa.solicitud.controller;

import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.*;
import com.nirsa.solicitud.dto.response.ErrorResponseDto;
import com.nirsa.solicitud.dto.response.ResponseDto;
import com.nirsa.solicitud.service.IPrintService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path="/api/v1/print")
@AllArgsConstructor
@Tag(name = "Print", description = "API para la impresión de etiquetas")
@CrossOrigin(origins = "*", allowedHeaders = "*")
@SecurityRequirement(name = "tokenAuth")
public class RequestPrintController {

    private IPrintService printService;

    private static final Logger logger = LoggerFactory.getLogger(RequestPrintController.class);

    @Operation(summary = "Previsualizar etiqueta", description = "Genera una previsualización de la etiqueta en formato PNG")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Previsualización generada exitosamente",
                    content = @Content(mediaType = "image/png", schema = @Schema(type = "string", format = "binary"))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping(value = "preview/{labelId}",
            produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public @ResponseBody byte[] previewLabel(
            @Parameter(description = "ID de la etiqueta a visualizar",  example = "5")
            @PathVariable Integer labelId) {

            return printService.printPreview(labelId);
    }

    @Operation(summary = "Previsualizar etiqueta (alternativa)", description = "Genera una previsualización de la etiqueta como recurso")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Previsualización generada exitosamente",
                    content = @Content(mediaType = "application/octet-stream", schema = @Schema(type = "string", format = "binary"))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping(value = "preview2/{labelId}",
            produces = MediaType.APPLICATION_OCTET_STREAM_VALUE)
    public @ResponseBody Resource previewLabel2(
            @Parameter(description = "ID de la etiqueta a visualizar",  example = "5")
            @PathVariable Integer labelId) {

            byte[] response = printService.printPreview(labelId);

            ByteArrayResource resource = new ByteArrayResource(response);

            return  resource;
    }

    @Operation(summary = "Previsualizar etiqueta (como imagen PNG)", description = "Genera una previsualización de la etiqueta como imagen PNG")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Previsualización generada exitosamente",
                    content = @Content(mediaType = "image/png", schema = @Schema(type = "string", format = "binary"))),
            @ApiResponse(responseCode = "404", description = "Etiqueta no encontrada",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping(value = "preview3/{labelId}")
    @ResponseBody
    public ResponseEntity<Resource>  previewLabel3(
            @Parameter(description = "ID de la etiqueta a visualizar",  example = "5")
            @PathVariable Integer labelId) {

        byte[] response = printService.printPreview(labelId);

        ByteArrayResource resource = new ByteArrayResource(response);

        return ResponseEntity.ok()
                .contentType(MediaType.IMAGE_PNG)
                .body(resource);

    }

    @Operation(summary = "Imprimir etiquetas", description = "Imprime el conjunto de etiquetas en la impresora seleccionada")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Etiquetas impresas exitosamente",
                    content = @Content(schema = @Schema(implementation = ResponseDto.class))),
            @ApiResponse(responseCode = "400", description = "Solicitud inválida",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "500", description = "Error interno del servidor",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @PostMapping("/real")
    public ResponseEntity<ResponseDto> print(@Valid @RequestBody PrintsDTO printDTO)  {

        String result = printService.print(printDTO);

        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(new ResponseDto(RequestConstants.STATUS_200, result));
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\response\ErrorResponseDto.java
/===============================================================================

package com.nirsa.solicitud.dto.response;

import lombok.AllArgsConstructor;
import lombok.Data;
import org.springframework.http.HttpStatus;
import java.time.LocalDateTime;

@Data
@AllArgsConstructor
public class ErrorResponseDto {
    private  String apiPath;
    private HttpStatus errorCode;
    private  String errorMessage;
    private LocalDateTime errorTime;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\ImagesDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Schema(description = "DTO para transferir información de imágenes de etiquetas")
public class ImagesDTO {
    @Schema(description = "ID de la etiqueta asociada", example = "1")
    private Integer labelId;

    @Schema(description = "Contador de la imagen", example = "1")
    private Integer contador;

    @Schema(description = "Datos binarios de la imagen")
    private byte[] imagen;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\LabelsDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;

@Data
@Getter
@Setter
@ToString @NoArgsConstructor @AllArgsConstructor
@Builder
@Schema(description = "DTO para transferir información de etiquetas")
public class LabelsDTO {
    @Schema(description = "Identificador único de la etiqueta", example = "1")
    private Integer id;

    @Schema(description = "Identificador de la plantilla utilizada", example = "1")
    private Integer idPlantilla;

    @Schema(description = "Identificador de la orden de producción", example = "OP-2023-0001")
    @NotBlank(message = "El campo 'idOrdenProduccion' es obligatorio")
    private String idOrdenProduccion;

    @Schema(description = "Fecha de producción de la etiqueta", example = "06/07/2024")
    @NotNull(message = "El campo 'fechaProduccion' es obligatorio")
    private String fechaProduccion;

    @Schema(description = "Identificador del turno de producción", example = "2")
    @NotNull(message = "El campo 'idTurno' es obligatorio")
    private Integer idTurno;

    @Schema(description = "Identificador de la empresa", example = "10")
    @NotNull(message = "El campo 'idEmpresa' es obligatorio")
    private Integer idEmpresa;

    @Schema(description = "Razón social de la empresa", example = "NIRSA S.A.")
    private String razonSocial;

    @Schema(description = "Identificador de la recepción", example = "200")
    @NotNull(message = "El campo 'idRecepcion' es obligatorio")
    private Integer idRecepcion;

    @Schema(description = "Número de ingreso", example = "150")
    private Integer numeroIngreso;

    @Schema(description = "Identificador del proveedor", example = "300")
    @NotNull(message = "El campo 'idProveedor' es obligatorio")
    private Integer idProveedor;

    @Schema(description = "Nombre del proveedor", example = "Proveedor XYZ")
    private String proveedor;

    @Schema(description = "Identificador de la piscina", example = "400")
    @NotNull(message = "El campo 'idPiscina' es obligatorio")
    private Integer idPiscina;

    @Schema(description = "Descripción de la piscina", example = "Piscina 1")
    private String piscina;

    @Schema(description = "Cantidad de libras recibidas", example = "1000")
    private Integer librasRecibidas;

    @Schema(description = "Identificador de la cabecera de la proforma", example = "PF-2023-0001")
    @NotBlank(message = "El campo 'idProformaCabecera' es obligatorio")
    private String idProformaCabecera;

    @Schema(description = "Descripción de la proforma", example = "Proforma XYZ")
    @NotBlank(message = "El campo 'proforma' es obligatorio")
    private String proforma;

    @Schema(description = "Identificador del detalle de la proforma", example = "PD-2023-0001")
    @NotBlank(message = "El campo 'idProformaDetalle' es obligatorio")
    private String idProformaDetalle;

    @Schema(description = "Identificador del cliente", example = "537")
    private Integer idCliente;

    @Schema(description = "Nombre del cliente", example = "Cliente ABC")
    @NotBlank(message = "El campo 'cliente' es obligatorio")
    private String cliente;

    @Schema(description = "Identificador del tipo de etiqueta", example = "3")
    @NotNull(message = "El campo 'idTipoEtiqueta' es obligatorio")
    private Integer idTipoEtiqueta;

    @Schema(description = "Descripción del tipo de etiqueta", example = "Tipo A")
    @NotBlank(message = "El campo 'tipoEtiqueta' es obligatorio")
    private String tipoEtiqueta;

    @Schema(description = "Identificador del tipo de camarón recibido", example = "700")
    @NotNull(message = "El campo 'idRecepcionTipoCamaron' es obligatorio")
    private Integer idRecepcionTipoCamaron;

    @Schema(description = "Descripción del tipo de camarón", example = "Camarón A")
    @NotBlank(message = "El campo 'tipoCamaron' es obligatorio")
    private String tipoCamaron;

    @Schema(description = "Codificación 1", example = "COD1")
    @NotBlank(message = "El campo 'codificacion1' es obligatorio")
    private String codificacion1;

    @Schema(description = "Identificador de la talla del camarón", example = "800")
    @NotNull(message = "El campo 'idRecepcionTalla' es obligatorio")
    private Integer idRecepcionTalla;

    @Schema(description = "Talla del camarón", example = "20/30")
    @NotNull(message = "El campo 'talla' es obligatorio")
    private String talla;

    @Schema(description = "Identificador de la caja/marca", example = "900")
    @NotBlank(message = "El campo 'idCajaMarca' es obligatorio")
    private String idCajaMarca;

    @Schema(description = "Marca de la caja", example = "Marca XYZ")
    @NotBlank(message = "El campo 'marca' es obligatorio")
    private String marca;

    @Schema(description = "Material de la caja", example = "Cartón")
    @NotBlank(message = "El campo 'material' es obligatorio")
    private String material;

    @Schema(description = "Descripción del material", example = "Caja de cartón resistente")
    private String descripcionMaterial;

    @Schema(description = "Cantidad de unidades por caja", example = "10")
    @NotNull(message = "El campo 'master' es obligatorio")
    private Integer master;

    @Schema(description = "Cantidad solicitada", example = "100")
    private Integer cantidad;

    @Schema(description = "Identificador de la clasificación por peso", example = "1000")
    @NotNull(message = "El campo 'idClasificacionPeso' es obligatorio")
    private Integer idClasificacionPeso;

    @Schema(description = "Descripción del empaque", example = "Empaque primario")
    @NotBlank(message = "El campo 'empaque' es obligatorio")
    private String empaque;

    @Schema(description = "Unidad de medida en SAP", example = "KG")
    @NotBlank(message = "El campo 'umSap' es obligatorio")
    private String umSap;

    @Schema(description = "Identificador del color 1", example = "1100")
    private Integer idColor1;

    @Schema(description = "Descripción del color 1", example = "Rojo")
    private String color1;

    @Schema(description = "Identificador del color 2", example = "1200")
    private Integer idColor2;

    @Schema(description = "Descripción del color 2", example = "Azul")
    private String color2;

    @Schema(description = "Identificador del tipo de presentación", example = "1300")
    @NotNull(message = "El campo 'idPresentacionTipo' es obligatorio")
    private Integer idPresentacionTipo;

    @Schema(description = "Descripción del tipo de presentación", example = "Caja")
    @NotBlank(message = "El campo 'presentacionTipo' es obligatorio")
    private String presentacionTipo;

    @Schema(description = "Cantidad de etiquetas solicitadas", example = "200")
    @NotNull(message = "El campo 'cantEtiquetasSolicitadas' es obligatorio")
    private Integer cantEtiquetasSolicitadas;

    @Schema(description = "Cantidad de etiquetas impresas", example = "180")
    private Integer cantEtiquetasImpresas;

    @Schema(description = "Estado actual de la etiqueta", example = "Solicitado")
    @NotBlank(message = "El campo 'estado' es obligatorio")
    private String estado;

    @Schema(description = "Fecha y hora de creación de la etiqueta", example = "2023-09-01T10:15:30")
    private String creadoALas;

    @Schema(description = "Usuario que creó la etiqueta", example = "admin")
    private String creadoPor;

    @Schema(description = "Fecha y hora de la última actualización de la etiqueta", example = "2023-09-02T12:20:45")
    private String actualizadoALas;

    @Schema(description = "Usuario que realizó la última actualización de la etiqueta", example = "user123")
    private String actualizadoPor;

    @Schema(description = "Tipo de caja", example = "Cajeta")
    @NotBlank(message = "El campo 'tipoCaja' es obligatorio")
    private String tipoCaja;

    @Schema(description = "Identificador de la máquina", example = "M001")
    private String idMaquina;

    @Schema(description = "Descripción de la máquina", example = "Máquina XYZ")
    private String maquinaDescripcion;

    @Schema(description = "Nombre de la impresora", example = "Impresora01")
    private String nombreImpresora;

    @Schema(description = "Dirección IP de la impresora", example = "192.168.1.100")
    private String ip;

    @Schema(description = "Puerto de la impresora", example = "9100")
    private Integer puerto;

    @Schema(description = "Modelo de la impresora", example = "HP LaserJet Pro")
    private String modelo;

    @Schema(description = "Etiquetas solicitadas e impresas", example = "200 - 180")
    private String etiquetasSolicitadasImpresas;

    @Schema(description = "Fecha de vencimiento", example = "01/01/2024")
    private String fechaVencimiento;

    @Schema(description = "Peso neto master valor", example = "1000.5")
    private Double pesoNetoMasterValor;

    @Schema(description = "Registro de planta", example = "PLT-001")
    private String registroPlanta;

    @Schema(description = "Dirección del cliente", example = "Av. Siempre Viva 123")
    private String direccionCliente;

    @Schema(description = "Teléfono del cliente", example = "1234567890")
    private String telefonoCliente;

    @Schema(description = "Lote EX", example = "LT-2023-0001")
    private String loteEx;

    @Schema(description = "Nombre del productor", example = "Productor XYZ")
    private String productor;

    @Schema(description = "Dirección de la oficina", example = "Calle 10, Edificio ABC")
    private String direccionOficina;

    @Schema(description = "Dirección de la planta", example = "Calle Planta 15")
    private String direccionPlanta;

    @Schema(description = "Producto etiqueta", example = "Producto A")
    private String productoEtiqueta;

    @Schema(description = "Peso neto master", example = "2000.75")
    private Double pesoNetoMaster;

    @Schema(description = "Color", example = "Azul")
    private String color;

    @Schema(description = "Contacto", example = "contacto@empresa.com")
    private String contacto;

    @Schema(description = "Vendedor", example = "Vendedor XYZ")
    private String vendedor;

    @Schema(description = "País de destino", example = "Ecuador")
    private String paisDestino;

    @Schema(description = "Puerto de destino", example = "Puerto XYZ")
    private String puertoDestino;

    @Schema(description = "Número de orden de producción", example = "OP-1234")
    private String numeroOrdenProduccion;

    @Schema(description = "Calificación de camarón", example = "Calidad A")
    private String calificacionCamaron;

    @Schema(description = "turno", example = "1")
    private String turno;

    @Schema(description = "idcalificacioncamaron", example = "1")
    private Integer idCalificacionCamaron;

    @Schema(description = "idproduccion", example = "3281")
    private Integer idProduccion;

    public String getEtiquetasSolicitadasImpresas() {
        return cantEtiquetasSolicitadas + " - " + (cantEtiquetasImpresas != null ? cantEtiquetasImpresas : "0");
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\PrintsDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;

@Data
@Getter
@Setter
@ToString @NoArgsConstructor @AllArgsConstructor
@Builder
@Schema(description = "DTO para imprimir etiqueta")
public class PrintsDTO {
    @Schema(description = "Identificador único de la etiqueta", example = "1")
    @NotNull(message = "El campo 'labelId' es obligatorio")
    private Integer labelId;

    @Schema(description = "Identificador de la plantilla utilizada", example = "1")
    @NotNull(message = "El campo 'numEtiquetas' es obligatorio")
    private Integer numEtiquetas;

    @Schema(description = "dirección ip de la impresora", example = "192.198.23.60")
    @NotBlank(message = "El campo 'address' es obligatorio")
    private String address;

    @Schema(description = "Tipo de impresión (True) prueba, (False) real", example = "True")
    @NotNull(message = "El campo 'address' es obligatorio")
    private Boolean  test;

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\response\ResponseDto.java
/===============================================================================

package com.nirsa.solicitud.dto.response;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data @AllArgsConstructor
public class ResponseDto {
    private String statusCode;
    private String statusMsg;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\UserDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import lombok.Data;
import lombok.ToString;
import org.springframework.stereotype.Component;

@Data @ToString
@Component
public class UserDTO {
    private String idusuario;
    private  String usuario;
    private  String clave;
    private  Integer idgrupo;
    private String fecharegistro;
    private String  usuarioregistro;
    private  Integer estado;
    private  Integer idempresa;
    private String  categoria;
    private  long iat;
    private long exp;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\BaseEntity.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.Column;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.MappedSuperclass;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.springframework.data.annotation.CreatedBy;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedBy;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

@MappedSuperclass
@EntityListeners(AuditingEntityListener.class)
@Getter @Setter @ToString
public class BaseEntity {

    @CreatedDate
    @Column(name = "creado_a_las",updatable = false)
    private LocalDateTime createdAt;

    @CreatedBy
    @Column(name = "creado_por",updatable = false)
    private String createdBy;

    @LastModifiedDate
    @Column(name = "actualizado_a_las",insertable = false)
    private LocalDateTime updatedAt;

    @LastModifiedBy
    @Column(name = "actualizado_por",insertable = false)
    private String updatedBy;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Images.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Imagenes\"", schema = "public")
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Images extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "\"idEtiqueta\"")
    private Integer labelId;

    @Column(name = "contador")
    private Integer contador;

    @Column(name = "imagen")
    private byte[] imagen;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Labels.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "\"Etiquetas\"", schema = "public")
@Getter @Setter @ToString @AllArgsConstructor @NoArgsConstructor
public class Labels extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", updatable = false, nullable = false)
    private Integer id;

    @Column(name = "\"idPlantilla\"")
    private Integer idPlantilla;

    @Column(name = "idordenproduccion", length = 50, nullable = false)
    private String idOrdenProduccion;

    @Column(name = "fecha_produccion", nullable = false)
    private LocalDate fechaProduccion;

    @Column(name = "idturno", nullable = false)
    private Integer idTurno;

    @Column(name = "idempresa", nullable = false)
    private Integer idEmpresa;

    @Column(name = "razonsocial", length = 30, nullable = false)
    private String razonSocial;

    @Column(name = "idrecepcion", nullable = false)
    private Integer idRecepcion;

    @Column(name = "numero_ingreso", nullable = false)
    private Integer numeroIngreso;

    @Column(name = "idproveedor", nullable = false)
    private Integer idProveedor;

    @Column(name = "proveedor", length = 150, nullable = false)
    private String proveedor;

    @Column(name = "idpiscina", nullable = false)
    private Integer idPiscina;

    @Column(name = "piscina", length = 50, nullable = false)
    private String piscina;

    @Column(name = "libras_recibidas", nullable = false)
    private Integer librasRecibidas;

    @Column(name = "idproformacabecera", length = 50, nullable = false)
    private String idProformaCabecera;

    @Column(name = "proforma", length = 50, nullable = false)
    private String proforma;

    @Column(name = "idproformadetalle", length = 50, nullable = false)
    private String idProformaDetalle;

    @Column(name = "idcliente")
    private Integer idCliente;

    @Column(name = "cliente", length = 100, nullable = false)
    private String cliente;

    @Column(name = "idtipo_etiqueta", nullable = false)
    private Integer idTipoEtiqueta;

    @Column(name = "tipo_etiqueta", length = 50, nullable = false)
    private String tipoEtiqueta;

    @Column(name = "idrecepciontipocamaron", nullable = false)
    private Integer idRecepcionTipoCamaron;

    @Column(name = "tipo_camaron", length = 50, nullable = false)
    private String tipoCamaron;

    @Column(name = "codificacion1", length = 50, nullable = false)
    private String codificacion1;

    @Column(name = "idrecepciontalla", nullable = false)
    private Integer idRecepcionTalla;

    @Column(name = "talla", nullable = false)
    private String talla;

    @Column(name = "idcajamarca", length = 10, nullable = false)
    private String idCajaMarca;

    @Column(name = "marca", length = 50, nullable = false)
    private String marca;

    @Column(name = "material", length = 50, nullable = false)
    private String material;

    @Column(name = "descripcion_material", length = 50, nullable = false)
    private String descripcionMaterial;

    @Column(name = "master", nullable = false)
    private Integer master;

    @Column(name = "cantidad")
    private Integer cantidad;

    @Column(name = "idclasificacionpeso", nullable = false)
    private Integer idClasificacionPeso;

    @Column(name = "empaque", length = 50, nullable = false)
    private String empaque;

    @Column(name = "um_sap", length = 10, nullable = false)
    private String umSap;

    @Column(name = "idcolor1", nullable = false)
    private Integer idColor1;

    @Column(name = "color1", length = 10, nullable = false)
    private String color1;

    @Column(name = "idcolor2", nullable = false)
    private Integer idColor2;

    @Column(name = "color2", length = 10, nullable = false)
    private String color2;

    @Column(name = "idpresentaciontipo", nullable = false)
    private Integer idPresentacionTipo;

    @Column(name = "presentacion_tipo", length = 20, nullable = false)
    private String presentacionTipo;

    @Column(name = "cant_etiquetas_solicitadas", nullable = false)
    private Integer cantEtiquetasSolicitadas;

    @Column(name = "cant_etiquetas_impresas")
    private Integer cantEtiquetasImpresas;

    @Column(name = "estado", length = 10, nullable = false)
    private String estado;

    @Column(name = "tipocaja", length = 10, nullable = false)
    private String tipoCaja;

    @Column(name = "idmaquina", length = 5)
    private String idMaquina;

    @Column(name = "maquina_descripcion", length = 50)
    private String maquinaDescripcion;

    @Column(name = "nombre_impresora", length = 50)
    private String nombreImpresora;

    @Column(name = "ip", length = 50)
    private String ip;

    @Column(name = "puerto")
    private Integer puerto;

    @Column(name = "modelo", length = 50)
    private String modelo;

    @Column(name = "fechavencimiento")
    private LocalDate fechaVencimiento;

    @Column(name = "pesonetomastervalor")
    private Double pesoNetoMasterValor;

    @Column(name = "registroplanta", length = 255)
    private String registroPlanta;

    @Column(name = "direccioncliente", length = 255)
    private String direccionCliente;

    @Column(name = "telefonocliente", length = 255)
    private String telefonoCliente;

    @Column(name = "loteex", length = 255)
    private String loteEx;

    @Column(name = "productor", length = 255)
    private String productor;

    @Column(name = "direccionoficina", length = 255)
    private String direccionOficina;

    @Column(name = "direccionplanta", length = 255)
    private String direccionPlanta;

    @Column(name = "productoetiqueta", length = 255)
    private String productoEtiqueta;

    @Column(name = "pesonetomaster")
    private Double pesoNetoMaster;

    @Column(name = "color", length = 255)
    private String color;

    @Column(name = "contacto", length = 255)
    private String contacto;

    @Column(name = "vendedor", length = 255)
    private String vendedor;

    @Column(name = "paisdestino", length = 255)
    private String paisDestino;

    @Column(name = "puertodestino", length = 255)
    private String puertoDestino;

    @Column(name = "numeroordenproduccion", length = 255)
    private String numeroOrdenProduccion;

    @Column(name = "calificacioncamaron", length = 255)
    private String calificacionCamaron;

    @Column(name = "turno", length = 50)
    private String turno;

    @Column(name = "idcalificacioncamaron")
    private Integer idCalificacionCamaron;

    @Column(name = "idproduccion", nullable = false)
    private Integer idProduccion;

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Prints.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Impresiones\"", schema = "public")
@Getter
@Setter
@ToString
@AllArgsConstructor
@NoArgsConstructor
public class Prints extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", updatable = false, nullable = false)
    private Long id;

    @Column(name = "idetiqueta")
    private Integer idetiqueta;

    @Column(name = "contador")
    private Integer contador;

    @Column(name = "zpl", columnDefinition = "TEXT")
    private String zpl;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Templates.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Plantillas\"", schema = "public")
@Getter @Setter @ToString @AllArgsConstructor @NoArgsConstructor
public class Templates extends BaseEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @Column(name = "idcliente")
    private Integer idCliente;

    @Column(name = "zpl", columnDefinition = "TEXT")
    private String zpl;

    @Column(name = "tipocaja")
    private String tipoCaja;

    @Column(name = "estado")
    private Boolean estado;

    @Column(name = "idtipoetiqueta")
    private Integer idTipoEtiqueta;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\AuthorizationTokenException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.UNAUTHORIZED)
public class AuthorizationTokenException extends RuntimeException {

    public AuthorizationTokenException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\GlobalExceptionHandler.java
/===============================================================================

package com.nirsa.solicitud.exception;

import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.response.ErrorResponseDto;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;

@ControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponseDto> handleIllegalArgumentException(IllegalArgumentException exception,
                                                                           WebRequest webRequest){
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.BAD_REQUEST,
                exception.getMessage(),
                LocalDateTime.now()
        );

        return new ResponseEntity<>(errorResponseDTO, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponseDto> handleResourceNotFoundException(ResourceNotFoundException exception,
                                                                            WebRequest webRequest) {
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.NOT_FOUND,
                exception.getMessage(),
                LocalDateTime.now()
        );
        return new ResponseEntity<>(errorResponseDTO, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(AuthorizationTokenException.class)
    public ResponseEntity<ErrorResponseDto> handleAuthorizationTokenException(AuthorizationTokenException exception,
                                                                                 WebRequest webRequest){
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.UNAUTHORIZED,
                exception.getMessage(),
                LocalDateTime.now()
        );
        return new ResponseEntity<>(errorResponseDTO, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(IntegrationZplException.class)
    public ResponseEntity<ErrorResponseDto> handleIntegrationZplException(IntegrationZplException exception,
                                                                              WebRequest webRequest){
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.BAD_GATEWAY,
                exception.getMessage(),
                LocalDateTime.now()
        );
        return new ResponseEntity<>(errorResponseDTO, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(PrintException.class)
    public ResponseEntity<ErrorResponseDto> handlePrintException(PrintException exception,
                                                                          WebRequest webRequest){
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.BAD_REQUEST,
                exception.getMessage(),
                LocalDateTime.now()
        );
        return new ResponseEntity<>(errorResponseDTO, HttpStatus.BAD_REQUEST);
    }

    // New handlers for transaction-related exceptions
    @ExceptionHandler(MaxBoxesExceededException.class)
    public ResponseEntity<ErrorResponseDto> handleMaxBoxesExceededException(MaxBoxesExceededException exception,
                                                                            WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.BAD_REQUEST, exception.getMessage());
    }

    @ExceptionHandler(InvalidTransactionStateException.class)
    public ResponseEntity<ErrorResponseDto> handleInvalidTransactionStateException(InvalidTransactionStateException exception,
                                                                                   WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.BAD_REQUEST, exception.getMessage());
    }

    @ExceptionHandler(NirsaIntegrationException.class)
    public ResponseEntity<ErrorResponseDto> handleNirsaIntegrationException(NirsaIntegrationException exception,
                                                                            WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.BAD_GATEWAY, exception.getMessage());
    }

    @ExceptionHandler(CarNotFoundException.class)
    public ResponseEntity<ErrorResponseDto> handleCarNotFoundException(CarNotFoundException exception,
                                                                       WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.NOT_FOUND, exception.getMessage());
    }

    @ExceptionHandler(BoxNotFoundException.class)
    public ResponseEntity<ErrorResponseDto> handleBoxNotFoundException(BoxNotFoundException exception,
                                                                       WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.NOT_FOUND, exception.getMessage());
    }

    @ExceptionHandler(InvalidStateTransitionException.class)
    public ResponseEntity<ErrorResponseDto> handleInvalidStateTransitionException(InvalidStateTransitionException exception,
                                                                                  WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.BAD_REQUEST, exception.getMessage());
    }

    // Generic exception handler
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponseDto> handleGlobalException(Exception exception,
                                                                  WebRequest webRequest) {
        return createErrorResponse(webRequest, HttpStatus.INTERNAL_SERVER_ERROR,
                "An unexpected error occurred: " + exception.getMessage());
    }

    @ExceptionHandler(AuthorizationException.class)
    public ResponseEntity<ErrorResponseDto> handleAuthorizationException(
            AuthorizationException exception,
            WebRequest webRequest) {
        return createErrorResponse(
                webRequest,
                HttpStatus.UNAUTHORIZED,
                exception.getMessage()
        );
    }

    @ExceptionHandler(NonUniqueResultException.class)
    public ResponseEntity<ErrorResponseDto> handleNonUniqueResultException(
            NonUniqueResultException exception,
            WebRequest webRequest) {
        String errorMessage = exception.getMessage();
        if (exception.getOriginalException() != null) {
            errorMessage += " - Original error: " + exception.getOriginalException().getMessage();
        }

        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.CONFLICT,
                errorMessage,
                LocalDateTime.now()
        );

        return new ResponseEntity<>(errorResponseDTO, HttpStatus.CONFLICT);
    }

    @ExceptionHandler(DataIntegrityViolationException.class)
    public ResponseEntity<ErrorResponseDto> handleDataIntegrityViolationException(
            DataIntegrityViolationException exception,
            WebRequest webRequest) {

        String errorMessage = "A conflict occurred with existing data";

        // Extraer información más específica del error
        if (exception.getMessage().contains("UNQ_Cajas")) {
            errorMessage = RequestConstants.ERROR_DUPLICATE_BOX;
        } else if (exception.getMessage().contains("duplicate key")) {
            errorMessage = RequestConstants.ERROR_DUPLICATE_KEY + extractConstraintName(exception.getMessage());
        }

        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                HttpStatus.CONFLICT,
                errorMessage + " - Original error: " + exception.getMostSpecificCause().getMessage(),
                LocalDateTime.now()
        );

        return new ResponseEntity<>(errorResponseDTO, HttpStatus.CONFLICT);
    }

    // Método auxiliar para extraer el nombre de la restricción violada
    private String extractConstraintName(String message) {
        // Intenta extraer el nombre de la restricción del mensaje de error
        int constraintIndex = message.indexOf("constraint [");
        if (constraintIndex != -1) {
            int endIndex = message.indexOf("]", constraintIndex);
            if (endIndex != -1) {
                return message.substring(constraintIndex + 12, endIndex);
            }
        }
        return "unknown constraint";
    }

    // Helper method to create error responses
    private ResponseEntity<ErrorResponseDto> createErrorResponse(WebRequest webRequest,
                                                                 HttpStatus status,
                                                                 String message) {
        ErrorResponseDto errorResponseDTO = new ErrorResponseDto(
                webRequest.getDescription(false),
                status,
                message,
                LocalDateTime.now()
        );
        return new ResponseEntity<>(errorResponseDTO, status);
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\IntegrationZplException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_GATEWAY)
public class IntegrationZplException extends RuntimeException {

    public IntegrationZplException(String message, String error) {
        super(String.format("%s  - '%s'", message, error));
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\PrintException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class PrintException extends RuntimeException {

    public PrintException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\ResourceNotFoundException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {

    public ResourceNotFoundException(String resourceName, String fieldName, String fieldValue) {
        super(String.format("%s not found with the given input data %s : '%s'", resourceName, fieldName, fieldValue));
    }
}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\mapper\LabelsMapper.java
/===============================================================================

package com.nirsa.solicitud.mapper;

import com.nirsa.solicitud.dto.LabelsDTO;
import com.nirsa.solicitud.entity.Labels;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

public class LabelsMapper {

    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
    private static final Logger logger = LoggerFactory.getLogger(LabelsMapper.class);

    public static LabelsDTO mapToLabelsDto(Labels labels) {
        if (labels == null) {
            return null;
        }

        LabelsDTO dto = new LabelsDTO();
        dto.setId(labels.getId());
        dto.setIdPlantilla(labels.getIdPlantilla());
        dto.setIdOrdenProduccion(labels.getIdOrdenProduccion());
        dto.setFechaProduccion(labels.getFechaProduccion() != null ? labels.getFechaProduccion().format(DATE_FORMATTER) : null);
        dto.setIdTurno(labels.getIdTurno());
        dto.setIdEmpresa(labels.getIdEmpresa());
        dto.setRazonSocial(labels.getRazonSocial());
        dto.setIdRecepcion(labels.getIdRecepcion());
        dto.setNumeroIngreso(labels.getNumeroIngreso());
        dto.setIdProveedor(labels.getIdProveedor());
        dto.setProveedor(labels.getProveedor());
        dto.setIdPiscina(labels.getIdPiscina());
        dto.setPiscina(labels.getPiscina());
        dto.setLibrasRecibidas(labels.getLibrasRecibidas());
        dto.setIdProformaCabecera(labels.getIdProformaCabecera());
        dto.setProforma(labels.getProforma());
        dto.setIdProformaDetalle(labels.getIdProformaDetalle());
        dto.setIdCliente(labels.getIdCliente());
        dto.setCliente(labels.getCliente());
        dto.setIdTipoEtiqueta(labels.getIdTipoEtiqueta());
        dto.setTipoEtiqueta(labels.getTipoEtiqueta());
        dto.setIdRecepcionTipoCamaron(labels.getIdRecepcionTipoCamaron());
        dto.setTipoCamaron(labels.getTipoCamaron());
        dto.setCodificacion1(labels.getCodificacion1());
        dto.setIdRecepcionTalla(labels.getIdRecepcionTalla());
        dto.setTalla(labels.getTalla());
        dto.setIdCajaMarca(labels.getIdCajaMarca());
        dto.setMarca(labels.getMarca());
        dto.setMaterial(labels.getMaterial());
        dto.setDescripcionMaterial(labels.getDescripcionMaterial());
        dto.setMaster(labels.getMaster());
        dto.setCantidad(labels.getCantidad());
        dto.setIdClasificacionPeso(labels.getIdClasificacionPeso());
        dto.setEmpaque(labels.getEmpaque());
        dto.setUmSap(labels.getUmSap());
        dto.setIdColor1(labels.getIdColor1());
        dto.setColor1(labels.getColor1());
        dto.setIdColor2(labels.getIdColor2());
        dto.setColor2(labels.getColor2());
        dto.setIdPresentacionTipo(labels.getIdPresentacionTipo());
        dto.setPresentacionTipo(labels.getPresentacionTipo());
        dto.setCantEtiquetasSolicitadas(labels.getCantEtiquetasSolicitadas());
        dto.setCantEtiquetasImpresas(labels.getCantEtiquetasImpresas());
        dto.setEstado(labels.getEstado());
        dto.setTipoCaja(labels.getTipoCaja());
        dto.setIdMaquina(labels.getIdMaquina());
        dto.setMaquinaDescripcion(labels.getMaquinaDescripcion());
        dto.setNombreImpresora(labels.getNombreImpresora());
        dto.setIp(labels.getIp());
        dto.setPuerto(labels.getPuerto());
        dto.setModelo(labels.getModelo());

        dto.setEtiquetasSolicitadasImpresas(labels.getCantEtiquetasSolicitadas() + " - " +
                (labels.getCantEtiquetasImpresas() != null ? labels.getCantEtiquetasImpresas() : "0"));

        dto.setFechaVencimiento(labels.getFechaVencimiento() != null ? labels.getFechaVencimiento().format(DATE_FORMATTER) : null);
        dto.setPesoNetoMasterValor(labels.getPesoNetoMasterValor());
        dto.setRegistroPlanta(labels.getRegistroPlanta());
        dto.setDireccionCliente(labels.getDireccionCliente());
        dto.setTelefonoCliente(labels.getTelefonoCliente());
        dto.setLoteEx(labels.getLoteEx());
        dto.setProductor(labels.getProductor());
        dto.setDireccionOficina(labels.getDireccionOficina());
        dto.setDireccionPlanta(labels.getDireccionPlanta());
        dto.setProductoEtiqueta(labels.getProductoEtiqueta());
        dto.setPesoNetoMaster(labels.getPesoNetoMaster());
        dto.setColor(labels.getColor());
        dto.setContacto(labels.getContacto());
        dto.setVendedor(labels.getVendedor());
        dto.setPaisDestino(labels.getPaisDestino());
        dto.setPuertoDestino(labels.getPuertoDestino());
        dto.setNumeroOrdenProduccion(labels.getNumeroOrdenProduccion());
        dto.setCalificacionCamaron(labels.getCalificacionCamaron());
        dto.setTurno(labels.getTurno());
        dto.setIdCalificacionCamaron(labels.getIdCalificacionCamaron());
        dto.setIdProduccion(labels.getIdProduccion());

        // Mapeo de los campos de auditoría
        dto.setCreadoALas(labels.getCreatedAt() != null ? labels.getCreatedAt().format(DATE_TIME_FORMATTER) : null);
        dto.setCreadoPor(labels.getCreatedBy());
        dto.setActualizadoALas(labels.getUpdatedAt() != null ? labels.getUpdatedAt().format(DATE_TIME_FORMATTER) : null);
        dto.setActualizadoPor(labels.getUpdatedBy());


        return dto;
    }

    public static Labels mapToLabels(LabelsDTO dto) {
        if (dto == null) {
            return null;
        }

        Labels labels = new Labels();

        if (dto.getId() != null) {
            labels.setId(dto.getId());
        }

        labels.setIdPlantilla(dto.getIdPlantilla());
        labels.setIdOrdenProduccion(dto.getIdOrdenProduccion());
        labels.setFechaProduccion(dto.getFechaProduccion() != null ? LocalDate.parse(dto.getFechaProduccion(), DATE_FORMATTER) : null);
        labels.setIdTurno(dto.getIdTurno());
        labels.setIdEmpresa(dto.getIdEmpresa());
        labels.setRazonSocial(dto.getRazonSocial());
        labels.setIdRecepcion(dto.getIdRecepcion());
        labels.setNumeroIngreso(dto.getNumeroIngreso());
        labels.setIdProveedor(dto.getIdProveedor());
        labels.setProveedor(dto.getProveedor());
        labels.setIdPiscina(dto.getIdPiscina());
        labels.setPiscina(dto.getPiscina());
        labels.setLibrasRecibidas(dto.getLibrasRecibidas());
        labels.setIdProformaCabecera(dto.getIdProformaCabecera());
        labels.setProforma(dto.getProforma());
        labels.setIdProformaDetalle(dto.getIdProformaDetalle());
        labels.setIdCliente(dto.getIdCliente());
        labels.setCliente(dto.getCliente());
        labels.setIdTipoEtiqueta(dto.getIdTipoEtiqueta());
        labels.setTipoEtiqueta(dto.getTipoEtiqueta());
        labels.setIdRecepcionTipoCamaron(dto.getIdRecepcionTipoCamaron());
        labels.setTipoCamaron(dto.getTipoCamaron());
        labels.setCodificacion1(dto.getCodificacion1());
        labels.setIdRecepcionTalla(dto.getIdRecepcionTalla());
        labels.setTalla(dto.getTalla());
        labels.setIdCajaMarca(dto.getIdCajaMarca());
        labels.setMarca(dto.getMarca());
        labels.setMaterial(dto.getMaterial());
        labels.setDescripcionMaterial(dto.getDescripcionMaterial());
        labels.setMaster(dto.getMaster());
        labels.setCantidad(dto.getCantidad());
        labels.setIdClasificacionPeso(dto.getIdClasificacionPeso());
        labels.setEmpaque(dto.getEmpaque());
        labels.setUmSap(dto.getUmSap());
        labels.setIdColor1(dto.getIdColor1());
        labels.setColor1(dto.getColor1());
        labels.setIdColor2(dto.getIdColor2());
        labels.setColor2(dto.getColor2());
        labels.setIdPresentacionTipo(dto.getIdPresentacionTipo());
        labels.setPresentacionTipo(dto.getPresentacionTipo());
        labels.setCantEtiquetasSolicitadas(dto.getCantEtiquetasSolicitadas());
        labels.setCantEtiquetasImpresas(dto.getCantEtiquetasImpresas());
        labels.setEstado(dto.getEstado());
        labels.setTipoCaja(dto.getTipoCaja());
        labels.setIdMaquina(dto.getIdMaquina());
        labels.setMaquinaDescripcion(dto.getMaquinaDescripcion());
        labels.setNombreImpresora(dto.getNombreImpresora());
        labels.setIp(dto.getIp());
        labels.setPuerto(dto.getPuerto());
        labels.setModelo(dto.getModelo());

        labels.setFechaVencimiento(dto.getFechaVencimiento() != null ? LocalDate.parse(dto.getFechaVencimiento(), DATE_FORMATTER) : null);
        labels.setPesoNetoMasterValor(dto.getPesoNetoMasterValor());
        labels.setRegistroPlanta(dto.getRegistroPlanta());
        labels.setDireccionCliente(dto.getDireccionCliente());
        labels.setTelefonoCliente(dto.getTelefonoCliente());
        labels.setLoteEx(dto.getLoteEx());
        labels.setProductor(dto.getProductor());
        labels.setDireccionOficina(dto.getDireccionOficina());
        labels.setDireccionPlanta(dto.getDireccionPlanta());
        labels.setProductoEtiqueta(dto.getProductoEtiqueta());
        labels.setPesoNetoMaster(dto.getPesoNetoMaster());
        labels.setColor(dto.getColor());
        labels.setContacto(dto.getContacto());
        labels.setVendedor(dto.getVendedor());
        labels.setPaisDestino(dto.getPaisDestino());
        labels.setPuertoDestino(dto.getPuertoDestino());
        labels.setNumeroOrdenProduccion(dto.getNumeroOrdenProduccion());
        labels.setCalificacionCamaron(dto.getCalificacionCamaron());
        labels.setTurno(dto.getTurno());
        labels.setIdCalificacionCamaron(dto.getIdCalificacionCamaron());
        labels.setIdProduccion(dto.getIdProduccion());

        // No mapeamos los campos de auditoría del DTO a la entidad
        // ya que estos son manejados automáticamente por JPA

        return labels;
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\ImagesRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.Images;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
@Tag(name = "Images Repository", description = "Repositorio para manejar las imágenes de las etiquetas")
public interface ImagesRepository extends JpaRepository<Images, Integer> {
    @Operation(summary = "Buscar imagen por labelId y contador")
    Optional<Images> findByLabelIdAndContador(Integer labelId, Integer contador);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\LabelsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.Labels;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;

@Repository
public interface LabelsRepository extends JpaRepository<Labels, Integer> {
    List<Labels> findByIdOrdenProduccion(String idOrdenProduccion);
    List<Labels> findByIdMaquina(String idMaquina);
    List<Labels> findByIdMaquinaAndIdOrdenProduccion(String idMaquina, String idOrdenProduccion);
    List<Labels> findByIdMaquinaAndIdOrdenProduccionAndIdProformaCabecera(String idMaquina, String idOrdenProduccion, String idProformaCabecera);
    List<Labels> findByIdIn(Collection<Integer> ids);
    List<Labels> findByFechaProduccionAndEstado(LocalDate fechaProduccion, String estado);

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\PrintsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.Prints;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PrintsRepository extends JpaRepository<Prints, Long> {
    long countByIdetiqueta(Integer idetiqueta);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\TemplatesRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.Templates;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface TemplatesRepository extends JpaRepository<Templates, Integer> {
    List<Templates> findByIdClienteAndTipoCajaAndIdTipoEtiquetaAndEstadoIsTrue(Integer idCliente, String tipoCaja, Integer idTipoEtiqueta);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\Impl\PrintService.java
/===============================================================================

package com.nirsa.solicitud.service.Impl;

import com.nirsa.solicitud.client.WebClientApiZpl;
import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.PrintsDTO;
import com.nirsa.solicitud.entity.*;
import com.nirsa.solicitud.exception.PrintException;
import com.nirsa.solicitud.exception.ResourceNotFoundException;
import com.nirsa.solicitud.repository.*;
import com.nirsa.solicitud.service.IPrintService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.text.MessageFormat;
import java.time.format.DateTimeFormatter;
import java.util.*;


@Service
@AllArgsConstructor
@Slf4j
@Tag(name = "Print Service", description = "Servicio para manejar la impresión de etiquetas")
public class PrintService implements IPrintService {
    private LabelsRepository labelsRepository;
    private TemplatesRepository templatesRepository;
    private PrintsRepository printsRepository;
    private WebClientApiZpl webClientApiZpl;
    @Autowired
    private ImagesRepository imagesRepository;

    @Override
    public byte[] printPreview(Integer labelId) {
        Labels label = getLabel(labelId);
        String zplPlantilla = getPlantilla(label);
        log.info("ZPL_PLANTILLA: {} ", zplPlantilla);
        String zpl = createZpl(zplPlantilla,label,1);
        log.info("ZPL: {} ", zpl);

        // Search in cache using Cache-Aside pattern
        Optional<Images> cachedImage = imagesRepository.findByLabelIdAndContador(labelId, 1);

        if (cachedImage.isPresent()) {
            log.info("Image found in cache for labelId: {}", labelId);
            return cachedImage.get().getImagen();
        }
        //If not cached, get from external API
        byte[] response = webClientApiZpl.preview(zpl);
        log.info("IMAGE TAMAÑO: {} ", response.length);

        // Save to chache
        Images newImage = new Images();
        newImage.setLabelId(labelId);
        newImage.setContador(1);
        newImage.setImagen(response);
        imagesRepository.save(newImage);

        log.info("Image saved in cache for labelId: {}", labelId);

        return response;
    }

    private Labels getLabel(Integer labelId){
        var label = labelsRepository.findById(labelId)
                .orElseThrow(() -> new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL, RequestConstants.FIELD_ID, labelId.toString()));
        return label;
    }

    private String getPlantilla(Labels label){
        var idPlantilla = label.getIdPlantilla();
        var plantilla = templatesRepository.findById(idPlantilla)
                . orElseThrow(() -> new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL, RequestConstants.FIELD_ID, idPlantilla.toString()));
        return plantilla.getZpl();
    }

    private String createZplAddCounter(String zplPlantilla,Integer idEtiqueta, Integer counter) {
        return zplPlantilla.replace("{contador}",idEtiqueta.toString()+"_"+counter.toString());
    }

    private String createZplWithOutCounter(String zplPlantilla, Labels label) {

        DateTimeFormatter fyymmdd = DateTimeFormatter.ofPattern("yyyyMMdd");
        DateTimeFormatter fyyddmmyy = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DateTimeFormatter fmmyyyy = DateTimeFormatter.ofPattern("MM/yyyy");
        //log.info("FECHA VENCIMIENTO: " + label.getFechaVencimiento().toString());
        //log.info("LOTEX: " + label.getLoteEx());
        return zplPlantilla.
                replace("{marca}",label.getMarca() != null ? label.getMarca():"").
                replace("{talla}",label.getTalla() != null ? label.getTalla().toString():"").
                replace("{fp:YYYY}",label.getFechaProduccion() != null ? String.valueOf(label.getFechaProduccion().getYear()): "").
                replace("{fv:YYYY}",label.getFechaVencimiento() != null ? String.valueOf(label.getFechaVencimiento().getYear()): "").
                replace("{fp:MM}",label.getFechaProduccion() != null ? String.valueOf(label.getFechaProduccion().getMonthValue()):"").
                replace("{fp:DD}",label.getFechaProduccion() != null ? String.valueOf(label.getFechaProduccion().getDayOfMonth()):"").
                replace("{fv:DD}",label.getFechaVencimiento() != null ? String.valueOf(label.getFechaVencimiento().getDayOfMonth()):"").
                replace("{fv:MM}",label.getFechaVencimiento() != null ? String.valueOf(label.getFechaVencimiento().getMonthValue()):"").
                replace("{fv:DD}",label.getFechaVencimiento() != null ? String.valueOf(label.getFechaVencimiento().getDayOfMonth()):"").
                replace("{peso}",label.getPesoNetoMasterValor() != null ? String.valueOf(label.getPesoNetoMasterValor()):"").
                replace("{um}",label.getUmSap() != null ? label.getUmSap():"").
                replace("{um:txch}",label.getUmSap() != null ? "CHINA "+label.getUmSap():"").
                replace("{registro}",label.getRegistroPlanta() != null ? label.getRegistroPlanta():"").
                replace("{cliente}",label.getCliente() != null ? label.getCliente():"").
                replace("{cliente:txtch}",label.getCliente() != null ? "CHINA "+label.getCliente():"").
                replace("{cliente:txch}",label.getCliente() != null ? "CHINA "+label.getCliente():"").
                replace("{dircliente}",label.getDireccionCliente() !=null ? label.getDireccionCliente():"").
                replace("{dircliente:txch}",label.getDireccionCliente() !=null ? "CHINA "+label.getDireccionCliente():"").
                replace("{telcliente}",label.getTelefonoCliente() != null ? label.getTelefonoCliente():"").
                replace("{loteex}",label.getLoteEx() != null ? label.getLoteEx():"").
                replace("{ingreso}",label.getNumeroIngreso().toString()).
                replace("{productor}",label.getProductor() != null ? label.getProductor():"").
                replace("{diroficina}",label.getDireccionOficina() != null ? label.getDireccionOficina():"").
                replace("{direccionoficina}",label.getDireccionOficina() != null ? label.getDireccionOficina():"").
                replace("{dirplanta}",label.getDireccionPlanta() != null ? label.getDireccionPlanta():"").
                replace("{direccionplanta}",label.getDireccionPlanta() != null ? label.getDireccionPlanta():"").
                replace("{productoetiqueta}",label.getProductoEtiqueta() != null ? label.getProductoEtiqueta():"").
                replace("{pesoneto}",label.getPesoNetoMaster() != null ? label.getPesoNetoMaster().toString():"").
                replace("{fp:YYMMDD-lote}",(label.getFechaProduccion() != null ? label.getFechaProduccion().format(fyymmdd):"") +"-"+ (label.getNumeroIngreso() != null ? label.getNumeroIngreso().toString():"")).
                replace("{fp:DD/MM/YY}",label.getFechaProduccion() != null ? label.getFechaProduccion().format(fyyddmmyy):"").
                replace("{fp:MM/YYYY}",label.getFechaVencimiento() != null ? label.getFechaVencimiento().format(fmmyyyy):"").
                replace("{lote}",label.getNumeroIngreso() != null ? label.getNumeroIngreso().toString():"").
                replace("{color}", label.getColor() != null ? label.getColor():"").
                replace("{fp:DD/MM/YYYY}",label.getFechaProduccion() != null ? label.getFechaProduccion().format(fyyddmmyy):"").
                replace("{fv:DD/MM/YYYY}",label.getFechaVencimiento() != null ? label.getFechaVencimiento().format(fyyddmmyy):"").
                replace("{empaque}",label.getEmpaque() != null ? label.getEmpaque():"").
                replace("{razonsocial}",label.getRazonSocial() != null ? label.getRazonSocial():"").
                replace("{contacto}",label.getContacto() != null ? label.getContacto():"").
                replace("{vendedor}",label.getVendedor() != null ? label.getVendedor():"").
                replace("{paisdestino}",label.getPaisDestino() != null ? label.getPaisDestino():"").
                replace("{tipo_camaron}",label.getTipoCamaron() != null ? label.getTipoCamaron():"").
                replace("{numeroordenproduccion}",label.getNumeroOrdenProduccion() != null ? label.getNumeroOrdenProduccion():"").
                replace("{numeroproforma}",label.getProforma() != null ? label.getProforma():"").
                replace("{calificacioncamaron}",label.getCalificacionCamaron() != null ? label.getCalificacionCamaron():"").
                replace("{descripcion}",label.getMaquinaDescripcion() != null ? label.getMaquinaDescripcion():"").
                replace("{material}",label.getMaterial()  != null ? label.getMaterial():"").
                replace("{descripcion_material}",label.getDescripcionMaterial() != null ? label.getDescripcionMaterial():"").
                replace("{puestodestino}",label.getPuertoDestino()  != null ? label.getPuertoDestino():"").
                replace("{numero_ingreso}",label.getNumeroIngreso() != null ? label.getNumeroIngreso().toString():"");

    }

    private String createZpl(String zplPlantilla, Labels label, Integer counter){
        return createZplWithOutCounter(zplPlantilla, label).replace("{contador}",label.getId().toString() +"_"+counter.toString());
    }

    @Operation(summary = "Imprimir etiquetas", description = "Realiza la impresión de las etiquetas")
    @Override
    public String print(PrintsDTO printsDTO) {

        Integer labelId = printsDTO.getLabelId();
        Integer numEtiquetas = printsDTO.getNumEtiquetas();
        String address = printsDTO.getAddress();
        Boolean test = printsDTO.getTest();
        var codeResponse = "";

        Labels label = getLabel(labelId);
        var init = label.getCantEtiquetasImpresas() + 1;

        // Validation of the number of labels to be printed
        int etiquetasImpresas = label.getCantEtiquetasImpresas() != null ? label.getCantEtiquetasImpresas() : 0;
        int etiquetasDisponibles = label.getCantEtiquetasSolicitadas() - etiquetasImpresas;
        if (numEtiquetas > etiquetasDisponibles) {
            throw new IllegalArgumentException("No se pueden imprimir más etiquetas de las solicitadas. Disponibles: " + etiquetasDisponibles);
        }
        log.info("Se imprimirán {} etiquetas de {} disponibles", numEtiquetas, etiquetasDisponibles);

        String zplPlantilla = getPlantilla(label);

        List<Prints> listPrints = new ArrayList<>();

        String zplInit = createZplWithOutCounter(zplPlantilla,label);
        int i = 1;
        for(;i <=numEtiquetas; i++){
            var contador =  i+label.getCantEtiquetasImpresas();
            String zpl = createZplAddCounter(zplInit,label.getId(),contador);
            try {
                webClientApiZpl.print(zpl,address);
                listPrints.add(getPrints(zpl,contador,label.getId()));
            }
            catch(IOException u){
                codeResponse = MessageFormat.format("{0} - {1}", RequestConstants.MESSAGE_CONNECTION_PRINT_ERROR_CONNECT, u.getMessage());
                break;
            }
        }

        label.setCantEtiquetasImpresas(i-1+label.getCantEtiquetasImpresas());
        if(label.getCantEtiquetasImpresas() >= label.getCantEtiquetasSolicitadas()) {
            label.setEstado("Impreso");
        }

        String message;
        if (test) {
            message = RequestConstants.MESSAGE_PRINT_TEST_SUCCESS;
        } else {
            int impresionesRealizadas = i - 1;  // We subtract 1 because te loop increments i one more time at the end
            label.setCantEtiquetasImpresas(etiquetasImpresas + impresionesRealizadas);
            if (label.getCantEtiquetasImpresas() >= label.getCantEtiquetasSolicitadas()) {
                label.setEstado("Impreso");
            }
            savePrints(label, listPrints);

            long totalImpresiones = printsRepository.countByIdetiqueta(labelId);
            message = String.format(RequestConstants.MESSAGE_PRINT_SUCCESS,
                    impresionesRealizadas,
                    totalImpresiones,
                    label.getCantEtiquetasImpresas(),
                    label.getCantEtiquetasSolicitadas());
        }

        if(!(codeResponse.isEmpty())){
            throw new PrintException(codeResponse);
        }

        return message;
    }

    @Transactional
    private void savePrints(Labels label, List<Prints> listPrints){
        labelsRepository.save(label);
        printsRepository.saveAll(listPrints);
    }

    private Prints getPrints(String zpl, Integer contador, Integer idEtiqueta){
        Prints prints = new Prints();
        prints.setZpl(zpl);
        prints.setContador(contador);
        prints.setIdetiqueta(idEtiqueta);

        return prints;

    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\Impl\RequestLabelsServiceImpl.java
/===============================================================================

package com.nirsa.solicitud.service.Impl;

import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.LabelsDTO;
import com.nirsa.solicitud.dto.UserDTO;
import com.nirsa.solicitud.entity.Labels;
import com.nirsa.solicitud.exception.AuthorizationTokenException;
import com.nirsa.solicitud.exception.ResourceNotFoundException;
import com.nirsa.solicitud.mapper.LabelsMapper;
import com.nirsa.solicitud.repository.LabelsRepository;
import com.nirsa.solicitud.repository.TemplatesRepository;
import com.nirsa.solicitud.service.IRequestLabelsService;
import com.nirsa.solicitud.service.IUtilityService;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import lombok.AllArgsConstructor;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.*;
import java.util.Set;
import java.util.stream.Collectors;

import lombok.extern.slf4j.Slf4j;

@Service
@AllArgsConstructor
@Slf4j
public class RequestLabelsServiceImpl implements IRequestLabelsService {

    private LabelsRepository labelsRepository;
    @PersistenceContext
    private final EntityManager entityManager;
    private TemplatesRepository templatesRepository;
    private IUtilityService utilityService;


    @Override
    @Transactional
    public List<Integer> generateLabel(List<LabelsDTO> labelsDTOList) {
        log.info("Attempting to generate {} labels", labelsDTOList.size());
        if (labelsDTOList.isEmpty()) {
            log.info("No labels to generate");
            return Collections.emptyList();
        }

        List<Labels> labels = labelsDTOList.stream()
                .map(labelDTO -> {
                    Integer idPlantilla = utilityService.getIdPlantilla(labelDTO, templatesRepository);
                    labelDTO.setIdPlantilla(idPlantilla);
                    return LabelsMapper.mapToLabels(labelDTO);
                })
                .collect(Collectors.toList());


        List<Labels> savedLabels = labelsRepository.saveAll(labels);

        log.info("Generated {} labels", savedLabels.size());
        return savedLabels.stream()
                .map(Labels::getId)
                .collect(Collectors.toList());
    }

    @Override
    public LabelsDTO fetchLabel(Integer labelId) {
        return labelsRepository.findById(labelId)
                .map(LabelsMapper::mapToLabelsDto)
                .orElseThrow(() -> new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL, RequestConstants.FIELD_ID, labelId.toString()));
    }

    @Override
    @Transactional
    public boolean updateLabel(UserDTO userDTO,List<LabelsDTO> labelsDTOList) {
        if (labelsDTOList.isEmpty()) {
            return false;
        }
        // Verifica que todas las etiquetas tengan un ID y que el usuario tenga un ID
        if (labelsDTOList.stream().anyMatch( e -> e.getId() == null) || userDTO.getIdusuario() == null) {
            throw new IllegalArgumentException(RequestConstants.MESSAGE_LABEL_ID_REQUIRED);
        }
        // Extrae los IDs de las etiquetas a actualizar
        List<Integer> Ids = labelsDTOList.stream()
                .map(LabelsDTO::getId)
                .collect(Collectors.toList());
        // Busca las etiquetas existentes en la base de datos
        List<Labels> existingLabels = labelsRepository.findByIdIn(Ids);
        // Si no se encontraron etiquetas, lanza una excepción
        if(existingLabels.isEmpty()) {
            throw new ResourceNotFoundException(
                    RequestConstants.RESOURCE_LABEL,
                    RequestConstants.FIELD_ID,
                    labelsDTOList.stream().map(LabelsDTO::getEstado).collect(Collectors.joining(", ")));
        }
        // Cuenta cuántas etiquetas no fueron creadas por el usuario actual
        Long numDif = existingLabels
                .stream()
                .filter(c -> !c.getCreatedBy().equals(userDTO.getIdusuario()))
                .count();

        log.info("NUMERO ETIQUETAS DIFERENTES {} labels", numDif);
        // Si hay etiquetas que el usuario no creó, lanza una excepción de autorización
        if (numDif > 0){
            throw new AuthorizationTokenException("Access Denied, this user cannot update");
        }
        // Convierte los DTO de etiquetas a entidades de etiquetas
        List<Labels> labels = labelsDTOList.stream()
                .map(LabelsMapper::mapToLabels)
                .collect(Collectors.toList());
        //Solo si todas las etiquetas fueron creadas por el usuario, procede con la actualización.
        labelsRepository.saveAll(labels);

        return true;
    }

    @Override
    @Transactional
    public boolean deleteLabel(Integer labelId) {
        Labels label = labelsRepository.findById(labelId)
                .orElseThrow(() -> new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL, RequestConstants.FIELD_ID, labelId.toString()));

        labelsRepository.delete(label);
        return true;
    }

    @Override
    public List<LabelsDTO> fetchLabelsByOrdenProduccion(String idOrdenProduccion) {
        List<Labels> labels = labelsRepository.findByIdOrdenProduccion(idOrdenProduccion);
        if (labels.isEmpty()) {
            throw new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL, RequestConstants.FIELD_ORDEN_PRODUCCION, idOrdenProduccion);
        }
        return labels.stream()
                .map(LabelsMapper::mapToLabelsDto)
                .collect(Collectors.toList());
    }

    @Override
    public Page<LabelsDTO> getAllLabels(Pageable pageable) {
        Page<Labels> labelsPage = labelsRepository.findAll(pageable);
        return labelsPage.map(LabelsMapper::mapToLabelsDto);
    }


    @Override
    public Set<String> fetchProductionOrders(String idMaquina) {
        return labelsRepository.findByIdMaquina(idMaquina).stream()
                .map(Labels::getIdOrdenProduccion)
                .collect(Collectors.toSet());
    }

    @Override
    public Set<String> fetchProformas(String idMaquina, String idOrdenProduccion) {
        return labelsRepository.findByIdMaquinaAndIdOrdenProduccion(idMaquina, idOrdenProduccion).stream()
                .map(Labels::getIdProformaCabecera)
                .collect(Collectors.toSet());
    }

    @Override
    public List<LabelsDTO> fetchRequestDetail(String idMaquina, String idOrdenProduccion, String idProformaCabecera) {
        return labelsRepository.findByIdMaquinaAndIdOrdenProduccionAndIdProformaCabecera(idMaquina, idOrdenProduccion, idProformaCabecera)
                .stream()
                .map(LabelsMapper::mapToLabelsDto)
                .collect(Collectors.toList());
    }

    @Override
    public Set<String> fetchAllProformas() {
        return labelsRepository.findAll().stream()
                .map(Labels::getIdProformaCabecera)
                .filter(proforma -> proforma != null && !proforma.isEmpty())
                .collect(Collectors.toSet());
    }

    @Override
    public List<LabelsDTO> fetchLabelsByProductionDateAndStatus(LocalDate fechaProduccion, String status) {
        if (fechaProduccion == null || status == null) {
            throw new IllegalArgumentException("Fecha de producción y estado no pueden ser nulos");
        }

        List<Labels> labels = labelsRepository.findByFechaProduccionAndEstado(fechaProduccion, status);
        if (labels.isEmpty()) {
            throw new ResourceNotFoundException(RequestConstants.RESOURCE_LABEL,
                    "fechaProduccion y estado", fechaProduccion + " y " + status);
        }
        return labels.stream()
                .map(LabelsMapper::mapToLabelsDto)
                .collect(Collectors.toList());
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\Impl\UtilityService.java
/===============================================================================

package com.nirsa.solicitud.service.Impl;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.LabelsDTO;
import com.nirsa.solicitud.dto.UserDTO;
import com.nirsa.solicitud.entity.Templates;
import com.nirsa.solicitud.exception.AuthorizationTokenException;
import com.nirsa.solicitud.exception.ResourceNotFoundException;
import com.nirsa.solicitud.repository.TemplatesRepository;
import com.nirsa.solicitud.service.IUtilityService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import java.util.Base64;
import java.util.List;


@Service
@Slf4j
public class UtilityService implements IUtilityService {

    @Override
    public void evaluateAuthorization(UserDTO user) {
        if (user == null || user.getIdusuario() == null || user.getUsuario() == null){
            throw new AuthorizationTokenException("Access Denied");
        }
    }

    @Override
    public UserDTO decodeBodyToken(String token) {
        ObjectMapper mapper = new ObjectMapper();
        Base64.Decoder decoder = Base64.getUrlDecoder();
        if(token == null) return new UserDTO();
        try {
            String[] chunks = token.split("\\.");
            if (chunks.length != 3) return  null;
            String payload = new String(decoder.decode(chunks[1]));
            return mapper.readValue(payload,UserDTO.class);
        } catch (Exception e) {
            return new UserDTO();
        }
    }

    @Override
    public Integer getIdPlantilla(LabelsDTO labelDTO, TemplatesRepository templatesRepository) {
        Integer idCliente = labelDTO.getIdCliente();
        String tipoCaja = labelDTO.getTipoCaja();
        Integer idTipoEtiqueta = labelDTO.getIdTipoEtiqueta();

        // If idTipoEtiqueta is 1 or 2, we use idCliente = -1
        if (idTipoEtiqueta == 1 || idTipoEtiqueta == 2) {
            idCliente = -1;
        }

        List<Templates> templates = templatesRepository.findByIdClienteAndTipoCajaAndIdTipoEtiquetaAndEstadoIsTrue(idCliente, tipoCaja, idTipoEtiqueta);

        if (templates.isEmpty()) {
            throw new ResourceNotFoundException(RequestConstants.RESOURCE_TEMPLATE, "combination",
                    RequestConstants.MESSAGE_NO_TEMPLATE + " (idCliente: " + idCliente + ", tipoCaja: " + tipoCaja + ", idTipoEtiqueta: " + idTipoEtiqueta + ")");
        }

        // Assuming we want the first matching template if multiple exist
        return templates.get(0).getId();
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\IPrintService.java
/===============================================================================

package com.nirsa.solicitud.service;

import com.nirsa.solicitud.dto.PrintsDTO;

public interface IPrintService {
    byte[] printPreview(Integer labelId);
    String print(PrintsDTO printsDTO);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\IRequestLabelsService.java
/===============================================================================

package com.nirsa.solicitud.service;

import com.nirsa.solicitud.dto.LabelsDTO;
import com.nirsa.solicitud.dto.UserDTO;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.time.LocalDate;
import java.util.List;
import java.util.Set;

public interface IRequestLabelsService {
    /**
     * Genera una nueva solicitud de etiqueta.
     * @param labelsDTOList - LabelsDTO Object que contiene la información de la solicitud de etiqueta
     * @return El ID de la etiqueta generada, con la información de la solicitud creada
     */
    List<Integer> generateLabel(List<LabelsDTO> labelsDTOList);

    /**
     * Busca una etiqueta por su ID
     * @param labelId - ID de la solicitud de etiqueta
     * @return LabelsDTO con los detalles de la información de la solicitud de etiqueta encontrada
     */
    LabelsDTO fetchLabel(Integer labelId);

    /**
     * Actualiza los detalles de una solicitud de etiqueta existente.
     * @param labelsDTO - LabelsDTO Object que contiene la información actualizada de la solicitud de etiqueta.
     * @return boolean indicando si la actualización fue exitosa o no
     */
    boolean updateLabel(UserDTO userDTO, List<LabelsDTO> labelsDTO);

    /**
     * Elimina una solicitud de etiqueta por su ID.
     * @param labelId - ID de la solicitud de etiqueta a eliminar.
     * @return boolean indicando si la eliminación fue exitosa o no
     */
    boolean deleteLabel(Integer labelId);

    /**
     * Busca todas las etiquetas para una orden de producción específica
     * @param idOrdenProduccion - ID de la orden de producción
     * @return List<LabelsDTO> con todas las etiquetas asociadas a la orden de producción
     */
    List<LabelsDTO> fetchLabelsByOrdenProduccion(String idOrdenProduccion);


    /**
     * Obtiene todas las etiquetas.
     * @param pageable Información de paginación (opcional)
     * @return Page<LabelsDTO> con todas las etiquetas
     */
    Page<LabelsDTO> getAllLabels(Pageable pageable);

    Set<String> fetchProductionOrders(String idMaquina);
    Set<String> fetchProformas(String idMaquina, String idOrdenProduccion);
    List<LabelsDTO> fetchRequestDetail(String idMaquina, String idOrdenProduccion, String idProformaCabecera);
    Set<String> fetchAllProformas();
    /**
     * Busca etiquetas por fecha de producción y estado
     * @param fechaProduccion - Fecha de producción de las etiquetas a buscar
     * @param status - Estado de las etiquetas a buscar
     * @return List<LabelsDTO> con las etiquetas que cumplen los criterios
     */
    List<LabelsDTO> fetchLabelsByProductionDateAndStatus(LocalDate fechaProduccion, String status);

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\IUtilityService.java
/===============================================================================

package com.nirsa.solicitud.service;

import com.nirsa.solicitud.dto.LabelsDTO;
import com.nirsa.solicitud.dto.UserDTO;
import com.nirsa.solicitud.repository.TemplatesRepository;

public interface IUtilityService {
    /**
     * Decode token
     * @param token - String JWT
     * @return User claims
     */
    UserDTO decodeBodyToken (String token);

    /**
     *  Throw exception if user is not authorized
     * @param current user
     */
    void evaluateAuthorization(UserDTO user);

    Integer getIdPlantilla(LabelsDTO labelDTO, TemplatesRepository templatesRepository);

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\AccountsApplication.java
/===============================================================================

package com.nirsa.solicitud;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.config.EnableJpaAuditing;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

@SpringBootApplication
@EnableJpaAuditing(auditorAwareRef = "auditAwareImpl")
@EnableWebMvc
public class AccountsApplication {

	public static void main(String[] args) {
		SpringApplication.run(AccountsApplication.class, args);
	}

}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Typetransactions.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Tipotransacciones\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class TypeTransactions extends BaseEntity {
    @Id
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "codigo", nullable = false, unique = true)
    private Integer code;

    @Column(name = "descripcion", length = 150)
    private String description;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\States.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Estados\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class States extends BaseEntity {
    @Id
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "codigo")
    private Integer code;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idtipotransaccion")
    private TypeTransactions typeTransaction;

    @Column(name = "descripcion", length = 15)
    private String description;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Transactions.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Table(name = "\"Transacciones\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class Transactions extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "idempresa", nullable = false)
    private Integer companyId;

    @Column(name = "fechaproduccion", nullable = false)
    private LocalDate productionDate;

    @Column(name = "idturno", nullable = false)
    private Integer turnId;

    @Column(name = "idtipotransaccion", nullable = false)
    private Integer typeTransactionId;

    @Column(name = "idproduccion")
    private Integer productionId;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idtipotransaccion", insertable = false, updatable = false)
    private TypeTransactions typeTransaction;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Cars.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;


@Entity
@Table(name = "\"Coches\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class Cars extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idtransaccion", nullable = false)
    private Transactions transaction;

    @Column(name = "codcoche", length = 50, nullable = false)
    private String carCode;

    @Column(name = "cantmaxcajas", nullable = false)
    private Integer maxBoxesQuantity;

    @Column(name = "cantactualcajas", nullable = false)
    private Integer currentBoxesQuantity;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idestado", nullable = false)
    private States state;

    @Column(name = "idtunel")
    private Integer tunnelId;

    @Column(name = "idnwcatalogocoche", length = 50, nullable = false)
    private String idnwcatalogocoche;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idtunel", insertable = false, updatable = false)
    private Tunnels tunnels;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\CarStates.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Estados_Coches\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class CarStates extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "idcoche")
    private Integer idcoche;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idestado")
    private States state;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\Boxes.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "\"Cajas\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
@Builder
public class Boxes extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "idetiqueta", nullable = false)
    private Integer labelId;

    @Column(name = "contador", nullable = false)
    private Integer counter;

    @Column(name = "codetiqueta", length = 50, nullable = false)
    private String labelCode;

    @Column(name = "version", length = 50)
    private String version;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idcoche")
    private Cars car;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idetiqueta", insertable = false, updatable = false)
    private Labels label;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\BoxesDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;


@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for boxes information")
public class BoxesDTO {
    @Schema(description = "Unique identifier", example = "1")
    private Integer id;

    @Schema(description = "Label ID", example = "1")
    @NotNull(message = "Label ID is required")
    private Integer labelId;

    @Schema(description = "Counter", example = "1")
    @NotNull(message = "Counter is required")
    private Integer counter;

    @Schema(description = "Label code", example = "LBL_001")
    @NotBlank(message = "Label code is required")
    private String labelCode;

    @Schema(description = "Version", example = "1.0")
    private String version;

    @Schema(description = "Car ID", example = "1")
    private Integer carId;

    @Schema(description = "Production order ID", example = "OP-2024-0001")
    private String productionOrderId;

    @Schema(description = "Proforma", example = "11387")
    private String proforma;

    @Schema(description = "Height", example = "40/50")
    private String height;

    @Schema(description = "Entry number", example = "1001")
    private Integer entryNumber;

    @Schema(description = "Material", example = "1124")
    private String material;

    @Schema(description = "Creation date and time", example = "2023-09-01T10:15:30")
    private String createdAt;

    @Schema(description = "Created by", example = "admin")
    private String createdBy;

    @Schema(description = "Last update date and time", example = "2023-09-02T12:20:45")
    private String updatedAt;

    @Schema(description = "Updated by", example = "user123")
    private String updatedBy;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\response\TransactionCarBoxResponseDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.response;

import com.nirsa.solicitud.dto.BoxesDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

import java.time.LocalDate;
import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for transaction, car and box response")
public class TransactionCarBoxResponseDTO {
    @Schema(description = "Transaction ID")
    private Integer transactionId;

    @Schema(description = "Production Date", example = "2024-01-09")
    private String productionDate;

    @Schema(description = "Turn ID", example = "1")
    private Integer turnId;

    @Schema(description = "Car ID")
    private Integer carId;

    @Schema(description = "Boxes list")
    private List<BoxesDTO> boxes;

    @Schema(description = "Car State ID")
    private Integer carStateId;

    @Schema(description = "Current Boxes Quantity")
    private Integer currentBoxesQuantity;

    @Schema(description = "Response details")
    private ResponseDto response;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\mapper\TransactionMapper.java
/===============================================================================

package com.nirsa.solicitud.mapper;

import com.nirsa.solicitud.dto.BoxesDTO;
import com.nirsa.solicitud.dto.MaterialBoxesCarCloseDTO;
import com.nirsa.solicitud.dto.request.NirsaSaveCloseCarRequestDTO;
import com.nirsa.solicitud.dto.response.MaterialBoxesQuantityResponseDTO;
import com.nirsa.solicitud.entity.Boxes;
import com.nirsa.solicitud.entity.ClosedCars;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

public class TransactionMapper extends BaseMapper {
    private static final Logger logger = LoggerFactory.getLogger(TransactionMapper.class);
    private static final DateTimeFormatter DATE_FORMATTER_NIRSA = DateTimeFormatter.ofPattern("yyyy-MM-dd");



    public static String[] parseEtiquetaCode(String etiquetaCode) {
        if (etiquetaCode == null || !etiquetaCode.contains("_")) {
            throw new IllegalArgumentException("Invalid etiqueta code format");
        }
        return etiquetaCode.split("_");
    }

    // Boxes Mapping
    public static BoxesDTO mapToBoxDto(Boxes box) {
        if (box == null) {
            return null;
        }

        return BoxesDTO.builder()
                .id(box.getId())
                .labelId(box.getLabelId())
                .counter(box.getCounter())
                .labelCode(box.getLabelCode())
                .version(box.getVersion())
                .carId(box.getCar() != null ? box.getCar().getId() : null)
                .productionOrderId(box.getLabel() != null ? box.getLabel().getIdOrdenProduccion() : null)
                .proforma(box.getLabel() != null ? box.getLabel().getProforma() : null)
                .height(box.getLabel() != null ? box.getLabel().getTalla() : null)
                .entryNumber(box.getLabel() != null ? box.getLabel().getNumeroIngreso() : null)
                .material(box.getLabel() != null ? box.getLabel().getMaterial() : null)
                .createdAt(formatDateTime(box.getCreatedAt()))
                .createdBy(box.getCreatedBy())
                .updatedAt(formatDateTime(box.getUpdatedAt()))
                .updatedBy(box.getUpdatedBy())
                .build();
    }

    public static NirsaSaveCloseCarRequestDTO mapToNirsaSaveCloseCarRequestDto(ClosedCars closedCar) {
        if (closedCar == null) {
            return null;
        }

        return NirsaSaveCloseCarRequestDTO.builder()
                .idusuario(closedCar.getCreatedBy())
                .idempresa(closedCar.getCompanyId())
                .razonsocial(closedCar.getBusinessName())
                .idproduccion(closedCar.getProductionId())
                .fechaproduccion(closedCar.getProductionDate().format(DATE_FORMATTER_NIRSA))
                .idturno(closedCar.getTurnId())
                .turno(closedCar.getTurn())
                .idmaquina(closedCar.getMachineId())
                .descripcion_maquina(closedCar.getMachineDescription())
                .idrecepcion(closedCar.getReceptionId())
                .numero_ingreso(closedCar.getEntryNumber())
                .numeroordenproduccion(closedCar.getProductionOrderNumber().toString())
                .idcajamarca(closedCar.getBoxBrandId())
                .marca(closedCar.getBrand())
                .idclasificacionpeso(closedCar.getWeightClassificationId())
                .empaque(closedCar.getPackaging())
                .idcalificacioncamaron(closedCar.getShrimpQualificationId())
                .calificacioncamaron(closedCar.getShrimpQualification())
                .idrecepciontalla(closedCar.getReceptionSizeId())
                .talla(closedCar.getSize())
                .idrecepciontipocamaron(closedCar.getReceptionShrimpTypeId())
                .tipo_camaron(closedCar.getShrimpType())
                .material(closedCar.getMaterial())
                .descripcion_material(closedCar.getMaterialDescription())
                .coche(closedCar.getCarCode())
                .cantidad_cajas(closedCar.getBoxesQuantity())
                .version(closedCar.getVersion())
                .idtransaccion(closedCar.getTransaction().getId().toString())
                .build();
    }

    public static MaterialBoxesQuantityResponseDTO mapToMaterialQuantityResponse(Object[] result) {
        if (result == null || result.length < 2) {
            return null;
        }

        return MaterialBoxesQuantityResponseDTO.builder()
                .material(result[0].toString())
                .boxesQuantity(((Long) result[1]).intValue())
                .version(null)
                .build();
    }

    // Mapeos
    public static List<BoxesDTO> mapBoxesToDTOs(List<Boxes> boxes) {
        return boxes.stream()
                .map(TransactionMapper::mapToBoxDto)
                .collect(Collectors.toList());
    }

    public static List<MaterialBoxesQuantityResponseDTO> mapMaterialQuantities(List<Object[]> materialCounts) {
        return materialCounts.stream()
                .map(TransactionMapper::mapToMaterialQuantityResponse)
                .collect(Collectors.toList());
    }

    public static List<MaterialBoxesCarCloseDTO> mapToCarCloseData(List<NirsaSaveCloseCarRequestDTO> closedCarsData) {
        return closedCarsData.stream()
                .map(closedCar -> MaterialBoxesCarCloseDTO.builder()
                        //.carCloseId(closedCar.getId())
                        .material(closedCar.getMaterial())
                        .boxesQuantity(closedCar.getCantidad_cajas())
                        .version(closedCar.getVersion())
                        .build())
                .collect(Collectors.toList());
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\TypeTransactionsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface TypeTransactionsRepository extends JpaRepository<TypeTransactions, Integer> {
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\StatesRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface StatesRepository extends JpaRepository<States, Integer> {
    Optional<States> findByCodeAndTypeTransactionId(Integer code, Integer typeTransactionId);




}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\TransactionsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.Optional;

@Repository
public interface TransactionsRepository extends JpaRepository<Transactions, Integer> {
    @Query("SELECT t FROM Transactions t WHERE t.companyId = :companyId " +
            "AND t.productionDate = :productionDate " +
            "AND t.turnId = :turnId " +
            "AND t.typeTransactionId = :typeTransactionId")
    Optional<Transactions> findExistingTransaction(
            @Param("companyId") Integer companyId,
            @Param("productionDate") LocalDate productionDate,
            @Param("turnId") Integer turnId,
            @Param("typeTransactionId") Integer typeTransactionId);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\CarsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;


@Repository
public interface CarsRepository extends JpaRepository<Cars, Integer> {

    @Query("SELECT c FROM Cars c " +
            "LEFT JOIN FETCH c.transaction t " +
            "LEFT JOIN FETCH c.state s " +
            "WHERE c.carCode = :carCode")
    Optional<Cars> findByCarCode(@Param("carCode") String carCode);

    @Query("SELECT c FROM Cars c WHERE c.tunnelId = :tunnelId ORDER BY c.createdAt DESC")
    List<Cars> findByTunnelIdOrderByCreatedAtDesc(Integer tunnelId);

    Optional<Cars> findByCarCodeAndState_Id(String carCode, Integer stateId);

    List<Cars> findByTunnelId(Integer tunnelId);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\CarStatesRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CarStatesRepository extends JpaRepository<CarStates, Integer> {
//    void deleteByCarId(Integer carId);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\BoxesRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.Boxes;
import jakarta.validation.constraints.Null;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Repository
public interface BoxesRepository extends JpaRepository<Boxes, Integer> {
    @Query("SELECT b FROM Boxes b LEFT JOIN FETCH b.label WHERE b.car.id = :carId")
    List<Boxes> findByCarId(Integer carId);

    @Query("SELECT b.label.material, COUNT(b) as quantity " +
            "FROM Boxes b WHERE b.car.id = :carId " +
            "GROUP BY b.label.material")
    List<Object[]> countBoxesByMaterial(@Param("carId") Integer carId);

    @Query("SELECT b FROM Boxes b WHERE b.car.id = :carId AND b.labelCode = :labelCode")
    Optional<Boxes> findByCarIdAndLabelCode(@Param("carId") Integer carId, @Param("labelCode") String labelCode);

    void deleteByCarIdAndLabelCode(Integer carId, String labelCode);

    void deleteByCarId(Integer carId);

    @Query("SELECT b FROM Boxes b LEFT JOIN FETCH b.label " +
            "WHERE b.car.id = :carId AND b.label.material = :material")
    List<Boxes> findByCarIdAndLabelMaterial(
            @Param("carId") Integer carId,
            @Param("material") String material);

//    @Query(value = "SELECT * FROM \"Cajas\" b LEFT JOIN \"Etiquetas\" e ON b.idetiqueta = e.id " +
//            "WHERE b.idcoche = :carId ORDER BY b.id DESC LIMIT 1", nativeQuery = true)

//    @Query("SELECT b FROM Boxes b LEFT JOIN FETCH b.label WHERE b.car.id = :carId ORDER BY b.id DESC")
//    @QueryHints(value = { @QueryHint(name = HINT_FETCH_SIZE, value = "1") })
//    Optional<Boxes> findFirstByCarIdWithLabel(Integer carId);

    @Query("SELECT b FROM Boxes b LEFT JOIN FETCH b.label WHERE b.car.id = :carId ORDER BY b.id DESC")
    List<Boxes> findByCarIdWithLabelOrderedDesc(@Param("carId") Integer carId);

    @Query("SELECT DISTINCT l.idMaquina, l.maquinaDescripcion FROM Boxes b " +
            "JOIN b.label l WHERE b.car.id = :carId")
    List<Object[]> findDistinctMachinesByCarId(@Param("carId") Integer carId);

    @Query("SELECT l.numeroIngreso, l.idOrdenProduccion, l.proforma, COUNT(b) " +
            "FROM Boxes b " +
            "JOIN b.label l " +
            "WHERE b.car.id = :carId " +
            "GROUP BY l.numeroIngreso, l.idOrdenProduccion, l.proforma")
    List<Object[]> findDetailByCarId(@Param("carId") Integer carId);

    @Query("SELECT DISTINCT c.id, l.numeroIngreso, c.carCode, l.tipoCamaron, l.numeroOrdenProduccion," +
            "t.transaction.id as idtranstunel, t.tunnelCode, c.transaction.id as idtranscoche " +
            "FROM Boxes b JOIN b.label l " +
            "JOIN b.car c JOIN c.tunnels t JOIN t.transaction tr " +
            "WHERE t.id = :tunnelId AND tr.productionDate = :productionDate  " +
            "AND tr.turnId = :turnId AND tr.typeTransactionId = :typeTranId AND tr.companyId = :idCompany " +
            "AND tr.productionId = :prodId AND (:carId IS NULL OR c.id = :carId)")
    List<Object[]> getBoxesTunnelToDownload(@Param("tunnelId") Integer tunnelId,
                                            @Param("productionDate") LocalDate productionDate,
                                            @Param("turnId") Integer turnId,
                                            @Param("typeTranId") Integer typeTranId,
                                            @Param("carId") Integer carId,
                                            @Param("idCompany") Integer idCompany,
                                            @Param("prodId") Integer prodId);

    @Query("SELECT DISTINCT c.id, l.numeroIngreso, l.tipoCamaron, l.calificacionCamaron, " +
            "l.color, l.numeroOrdenProduccion, l.idProduccion, l.marca, l.pesoNetoMaster, l.talla, c.currentBoxesQuantity, " +
            "l.proforma, l.umSap " +
            "FROM Boxes b JOIN b.label l " +
            "JOIN b.car c JOIN c.tunnels t JOIN t.transaction tr " +
            "WHERE c.id = :carId "
    )
    List<Object[]> getInfoBoxesAndCarToDownload(@Param("carId") Integer carId);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\MaxBoxesExceededException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class MaxBoxesExceededException extends RuntimeException {
    public MaxBoxesExceededException(String message) {
        super(message);
    }
}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\InvalidTransactionStateException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class InvalidTransactionStateException extends RuntimeException {
    public InvalidTransactionStateException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\NirsaIntegrationException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class NirsaIntegrationException extends RuntimeException {
    public NirsaIntegrationException(String message) {
        super(message);
    }
}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\CarNotFoundException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class CarNotFoundException extends RuntimeException {
    public CarNotFoundException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\BoxNotFoundException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.BAD_REQUEST)
public class BoxNotFoundException extends RuntimeException {
    public BoxNotFoundException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\ITransactionCarService.java
/===============================================================================

package com.nirsa.solicitud.service;

import com.nirsa.solicitud.dto.request.*;
import com.nirsa.solicitud.dto.response.TransactionCarBoxResponseDTO;
import com.nirsa.solicitud.dto.wrapper.*;

import java.util.List;

public interface ITransactionCarService {
    TransactionCarBoxResponseDTO createTransactionAndLoadCarWithBoxes(TransactionCarBoxRequestDTO request);
    TransactionCarBoxResponseDTO showBoxesOfACarAssociatedWithATransacction(TransactionCarBoxRequestDTO request);
    MaterialBoxesInfoResponseWrapper additionalInformationonFinaliseMaterialPerBox(Integer carId);
    MaterialBoxesCloseResponseWrapper finaliseOrClose(MaterialBoxesFinaliseRequestDTO request);
    TransactionCarBoxResponseDTO cancelTransaction(Integer carId);
    TransactionCarBoxResponseDTO deleteBox(Integer carId, String labelCode);
    void saveClosedCarsInNirsa(List<NirsaSaveCloseCarRequestDTO> closedCarsData);
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\Impl\TransactionCarServiceImpl.java
/===============================================================================

package com.nirsa.solicitud.service.Impl; //NOSONAR

import com.nirsa.solicitud.config.CurrentUser;
import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.BoxesDTO;
import com.nirsa.solicitud.dto.MaterialBoxesCarCloseDTO;
import com.nirsa.solicitud.dto.request.*;
import com.nirsa.solicitud.dto.response.*;
import com.nirsa.solicitud.dto.wrapper.MaterialBoxesCloseResponseWrapper;
import com.nirsa.solicitud.dto.wrapper.MaterialBoxesInfoResponseWrapper;
import com.nirsa.solicitud.entity.*;
import com.nirsa.solicitud.exception.*;
import com.nirsa.solicitud.mapper.TransactionMapper;
import com.nirsa.solicitud.repository.*;
import com.nirsa.solicitud.service.ITransactionCarService;
import com.nirsa.solicitud.utilities.TransactionUtils;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

import static com.nirsa.solicitud.mapper.TransactionMapper.*;

@Service
@AllArgsConstructor
@Slf4j
public class TransactionCarServiceImpl implements ITransactionCarService {

    private final TransactionsRepository transactionsRepository;
    private final CarsRepository carsRepository;
    private final BoxesRepository boxesRepository;
    private final StatesRepository statesRepository;
    private final CarStatesRepository carStatesRepository;
    private final LabelsRepository labelsRepository;
    private final ClosedCarsRepository closedCarsRepository;
    private final TransactionUtils transactionUtils;
    private final CurrentUser currentUser;

    @Autowired
    private NirsaIntegrationService nirsaIntegrationService;

    @Override
    @Transactional
    public TransactionCarBoxResponseDTO createTransactionAndLoadCarWithBoxes(TransactionCarBoxRequestDTO request) {
        log.info("Starting createTransactionAndLoadCarWithBoxes process");
        try {
            Transactions transaction = transactionUtils.findOrCreateTransaction(
                    transactionsRepository,
                    request.getCompanyId(),
                    request.getProductionDate(),
                    request.getTurnId(),
                    request.getProductionId(),
                    RequestConstants.TRANSACTION_TYPE_CAR_ID);

            Cars car = getOrCreateCar(request, transaction);
            transactionUtils.validateBoxesQuantity(car, request.getMaxBoxesQuantity());

            Boxes box = createAndSaveBox(request, car);

            transactionUtils.updateEntityCount(car, 1, "CurrentBoxesQuantity");
            carsRepository.save(car);

            List<BoxesDTO> boxes = List.of(TransactionMapper.mapToBoxDto(box));
            return transactionUtils.createTransactionCarBoxResponse(
                    car, boxes, RequestConstants.STATUS_201, RequestConstants.MESSAGE_201);
        } catch (Exception e) {
            log.error("Error in createTransactionAndLoadCarWithBoxes: ", e);
            throw e;
        }
    }

    //2 Get car information
    @Override
    public TransactionCarBoxResponseDTO showBoxesOfACarAssociatedWithATransacction(TransactionCarBoxRequestDTO request) {
        log.info("Starting showBoxesOfACarAssociatedWithATransacction for car code: {}", request.getCarCode());
        Cars car = carsRepository.findByCarCode(request.getCarCode())
                .orElseThrow(() -> new CarNotFoundException(RequestConstants.ERROR_CAR_NOT_FOUND + request.getCarCode()));

        transactionUtils.validateUserAuthorization(car, currentUser.getCurrentUser().getIdusuario());
        transactionUtils.validateCarState(car, RequestConstants.STATE_OPENED_CODE, "El coche no está en estado APERTURADO");

        List<BoxesDTO> boxes = mapBoxesToDTOs(boxesRepository.findByCarId(car.getId()));

        return transactionUtils.createTransactionCarBoxResponse(
                car, boxes, RequestConstants.STATUS_200, RequestConstants.MESSAGE_200);

    }

//    4. Get Boxes per materia
    @Override
    public MaterialBoxesInfoResponseWrapper additionalInformationonFinaliseMaterialPerBox(Integer carId) {

        try {
            log.info("Fetching material quantities for car ID: {}", carId);
            transactionUtils.validateAndGetCar(carsRepository, carId);

            List<MaterialBoxesQuantityResponseDTO> materialQuantities =
                    mapMaterialQuantities(boxesRepository.countBoxesByMaterial(carId));

            return MaterialBoxesInfoResponseWrapper.builder()
                    .carId(carId)
                    .materials(materialQuantities)
                    .response(new ResponseDto(RequestConstants.STATUS_200, RequestConstants.MESSAGE_200))
                    .build();

        } catch (Exception e){
            log.error("Error getting material quantities for car ID {}: {}", carId, e.getMessage(), e);
            throw e;
        }
    }

    @Override
    @Transactional
    public MaterialBoxesCloseResponseWrapper finaliseOrClose(MaterialBoxesFinaliseRequestDTO request) {
        log.info("Starting finalize/close process for car ID: {}", request.getCarId());
        try {
            // Validar el coche y su estado
            Cars car = transactionUtils.validateAndGetCar(carsRepository, request.getCarId());
            transactionUtils.validateCarForFinalization(car);

            // Preparar datos para el cierre
            Map<String, List<Boxes>> boxesByMaterial = findAndCacheBoxesByMaterial(car, request.getFinalise());
            updateBoxVersions(boxesByMaterial, request.getFinalise());

            // Almacenar estado actual antes de cualquier cambio para posible compensación
            Integer originalStateCode = car.getState().getCode();

            // Validar coche en NIRSA antes de realizar cambios
            transactionUtils.validateCarInNirsa(nirsaIntegrationService, car, currentUser.getToken());

            // Guardar información de cierre local primero (parte de la transacción DB)
            List<NirsaSaveCloseCarRequestDTO> closedCarsData = saveClosedCarsInformation(car, request.getFinalise(), boxesByMaterial);

            // Actualizar estado local y en NIRSA usando el método simplificado
            try {
                // Actualizar estado en DB y NIRSA
                transactionUtils.updateCarState(
                        carsRepository,
                        statesRepository,
                        carStatesRepository,
                        nirsaIntegrationService,
                        car,
                        RequestConstants.STATE_CLOSED_CODE,
                        car.getTransaction().getTypeTransactionId(),
                        currentUser.getToken()
                );

                // Enviar datos de cierre a NIRSA
                try {
                    saveClosedCarsInNirsa(closedCarsData);
                } catch (Exception nirsaDataError) {
                    log.error("Error saving closed cars data in NIRSA: {}", nirsaDataError.getMessage());

                    // Compensar el estado en NIRSA (revertir al estado anterior)
                    transactionUtils.compensateCarStateInNirsa(
                            nirsaIntegrationService,
                            car,
                            originalStateCode,
                            currentUser.getToken()
                    );

                    // Lanzar la excepción para que Spring haga rollback de la transacción local
                    throw nirsaDataError;
                }
            } catch (Exception nirsaError) {
                log.error("Error in NIRSA integration: {}", nirsaError.getMessage());
                // Dejar que Spring maneje el rollback de la transacción local
                throw nirsaError;
            }

            // Todo exitoso, retornar respuesta
            List<MaterialBoxesCarCloseDTO> carCloseData = mapToCarCloseData(closedCarsData);
            return createFinaliseCloseResponse(car.getId(), carCloseData);
        } catch (Exception e) {
            log.error("Error in finalizeOrClose for car {}: {}", request.getCarId(), e.getMessage(), e);
            throw e; // Spring hará rollback de la transacción
        }
    }


    //6. Cancelled
    @Override
    @Transactional
    public TransactionCarBoxResponseDTO cancelTransaction(Integer carId) {
        log.info("Starting cancelTransaction process for carId: {}", carId);
        try {
            Cars car = transactionUtils.validateAndGetCar(carsRepository, carId);


            transactionUtils.updateCarState(
                    carsRepository,
                    statesRepository,
                    carStatesRepository,
                    nirsaIntegrationService,
                    car,
                    RequestConstants.STATE_FREE_CODE,
                    car.getTransaction().getTypeTransactionId(),
                    currentUser.getToken()
            );

            List<Boxes> deletedBoxes = deleteCarAndRelatedDataExceptStates(car);
            List<BoxesDTO> deletedBoxesDTOs = deletedBoxes.stream()
                    .map(TransactionMapper::mapToBoxDto)
                    .collect(Collectors.toList());

            log.info("Updated NIRSA status to FREE for car: {}", car.getCarCode());

            return transactionUtils.createTransactionCarBoxResponse(
                    car, deletedBoxesDTOs, RequestConstants.STATUS_200, RequestConstants.MESSAGE_TRANSACTION_CANCELLED);
        } catch (Exception e) {
            log.error("Error in cancelTransaction: ", e);
            throw e;
        }
    }

    //7. Delete
    @Override
    @Transactional
    public TransactionCarBoxResponseDTO deleteBox(Integer carId, String labelCode) {
        log.info("Starting deleteBox process for carId: {} and labelCode: {}", carId, labelCode);
        try {
            Cars car = transactionUtils.validateAndGetCar(carsRepository, carId);
            validateBoxExists(carId, labelCode);
            boxesRepository.deleteByCarIdAndLabelCode(carId, labelCode);

            transactionUtils.updateEntityCount(car, -1, "CurrentBoxesQuantity");
            carsRepository.save(car);
            List<BoxesDTO> remainingBoxes = getCarBoxes(carId);

            return transactionUtils.createTransactionCarBoxResponse(
                    car,
                    remainingBoxes,
                    RequestConstants.STATUS_200,
                    RequestConstants.MESSAGE_BOX_DELETED
            );
        } catch (Exception e) {
            log.error("Error in deleteBox: {}", e.getMessage(), e);
            throw e;
        }
    }

    private Cars getOrCreateCar(TransactionCarBoxRequestDTO request, Transactions transaction) {
        Optional<Cars> existingCar = carsRepository.findByCarCode(request.getCarCode());

        if (existingCar.isPresent()) {
            Cars car = existingCar.get();
            // Validar que el coche pertenezca a la misma transacción
            if (!car.getTransaction().getId().equals(transaction.getId())) {
                throw new InvalidTransactionStateException("Car already exists in another transaction");
            }
            return car;
        }

        // Si no existe, crear nuevo coche
        Cars newCar = new Cars();
        newCar.setTransaction(transaction);
        newCar.setCarCode(request.getCarCode());
        newCar.setMaxBoxesQuantity(request.getMaxBoxesQuantity());
        newCar.setCurrentBoxesQuantity(0);
        newCar.setIdnwcatalogocoche(request.getIdnwcatalogocoche());
        States initialState = statesRepository.findById(RequestConstants.STATE_OPENED_ID)
                .orElseThrow(() -> new InvalidStateTransitionException("Invalid initial state"));
        newCar.setState(initialState);

        Cars savedCar = carsRepository.save(newCar);
        log.info("type: {}", savedCar.getTransaction().getTypeTransactionId());

        transactionUtils.updateCarState(
                carsRepository,
                statesRepository,
                carStatesRepository,
                nirsaIntegrationService,
                savedCar,
                RequestConstants.STATE_OPENED_CODE,
                savedCar.getTransaction().getTypeTransactionId(),
                currentUser.getToken()
        );
        return savedCar;
    }

    private Boxes createAndSaveBox(TransactionCarBoxRequestDTO request, Cars car) {

        String[] labelParts = TransactionMapper.parseEtiquetaCode(request.getLabelCode());
        Labels label = labelsRepository.findById(Integer.valueOf(labelParts[0]))
                .orElseThrow(() -> new ResourceNotFoundException("Label", "id", labelParts[0]));

        return boxesRepository.save(Boxes.builder()
                .labelId(label.getId())
                .counter(Integer.valueOf(labelParts[1]))
                .labelCode(request.getLabelCode())
                .car(car)
                .build());
    }


    private Map<String, List<Boxes>> findAndCacheBoxesByMaterial(Cars car, List<MaterialBoxesQuantityResponseDTO> materialsData) {
        Map<String, List<Boxes>> boxesByMaterial = new HashMap<>();

        materialsData.forEach(materialData -> {
            List<Boxes> boxes = boxesRepository.findByCarIdAndLabelMaterial(car.getId(), materialData.getMaterial());
            boxesByMaterial.put(materialData.getMaterial(), boxes);
        });

        return boxesByMaterial;
    }

    private void updateBoxVersions(Map<String, List<Boxes>> boxesByMaterial, List<MaterialBoxesQuantityResponseDTO> materialVersions) {
        log.info("Updating versions for boxes by materials. Materials count: {}", materialVersions.size());
        if (materialVersions == null || materialVersions.isEmpty()) {
            log.warn("No material versions provided");
            return;
        }

        log.info("Updating versions for boxes by materials. Materials count: {}", materialVersions.size());

        materialVersions.forEach(materialVersion -> {
            List<Boxes> boxes = boxesByMaterial.get(materialVersion.getMaterial());

            if (boxes.isEmpty()) {
                log.warn("No boxes found for material: {}", materialVersion.getMaterial());
                return;
            }

            boxes.forEach(box -> {
                box.setVersion(materialVersion.getVersion());
                boxesRepository.save(box);
            });
            log.info("Updated {} boxes for material {} to version {}",
                    boxes.size(), materialVersion.getMaterial(), materialVersion.getVersion());
        });
    }

    private List<NirsaSaveCloseCarRequestDTO> saveClosedCarsInformation(Cars car, List<MaterialBoxesQuantityResponseDTO> materialsData,  Map<String, List<Boxes>> boxesByMaterial) {

        List<NirsaSaveCloseCarRequestDTO> closedCarsRequests = new ArrayList<>();

        for (MaterialBoxesQuantityResponseDTO materialData : materialsData) {
            // Get label information for the material
            Labels label = findLabelByMaterial(materialData.getMaterial(), boxesByMaterial);
            //Labels label = findLabelByMaterial(materialData.getMaterial(), car.getId());

            ClosedCars closedCar = new ClosedCars();
            // Set basic information
            closedCar.setCar(car);
            closedCar.setTransaction(car.getTransaction());
            closedCar.setProductionId(car.getTransaction().getProductionId());
            closedCar.setProductionDate(car.getTransaction().getProductionDate());
            closedCar.setTurnId(car.getTransaction().getTurnId());
            closedCar.setCompanyId(car.getTransaction().getCompanyId());

            // Set material specific information
            closedCar.setMaterial(materialData.getMaterial());
            closedCar.setBoxesQuantity(materialData.getBoxesQuantity());
            closedCar.setVersion(materialData.getVersion());

            if (label != null) {
                closedCar.setTurn(label.getTurno());
                closedCar.setReceptionId(label.getIdRecepcion());
                closedCar.setEntryNumber(label.getNumeroIngreso());
                closedCar.setCarCode(car.getCarCode());
                closedCar.setBusinessName(label.getRazonSocial());
                closedCar.setMachineId(Integer.valueOf(label.getIdMaquina()));
                closedCar.setMachineDescription(label.getMaquinaDescripcion());
                closedCar.setEntryNumber(label.getNumeroIngreso());
                closedCar.setProductionOrderNumber(Integer.valueOf(label.getNumeroOrdenProduccion()));
                closedCar.setBoxBrandId(Integer.valueOf(label.getIdCajaMarca()));
                closedCar.setBrand(label.getMarca());
                closedCar.setWeightClassificationId(label.getIdClasificacionPeso());
                closedCar.setPackaging(label.getEmpaque());
                closedCar.setShrimpQualificationId(label.getIdCalificacionCamaron());
                closedCar.setShrimpQualification(label.getCalificacionCamaron());
                closedCar.setReceptionSizeId(label.getIdRecepcionTalla());
                closedCar.setSize(label.getTalla());
                closedCar.setReceptionShrimpTypeId(label.getIdRecepcionTipoCamaron());
                closedCar.setShrimpType(label.getTipoCamaron());
                closedCar.setMaterialDescription(label.getDescripcionMaterial());
            }

            ClosedCars savedClosedCar = closedCarsRepository.save(closedCar);
            closedCarsRequests.add(TransactionMapper.mapToNirsaSaveCloseCarRequestDto(savedClosedCar));
        }

        return closedCarsRequests;
    }

    public void saveClosedCarsInNirsa(List<NirsaSaveCloseCarRequestDTO> closedCarsData) {
        log.info("Saving closed cars data in NIRSA, records: {}", closedCarsData.size());
        nirsaIntegrationService.saveClosedCarsInNirsa(closedCarsData, currentUser.getToken());
        log.info("Successfully saved closed cars data in NIRSA");
    }

    private MaterialBoxesCloseResponseWrapper createFinaliseCloseResponse(Integer carId, List<MaterialBoxesCarCloseDTO> materials) {
        return MaterialBoxesCloseResponseWrapper.builder()
                .carId(carId)
                .carClose(materials)
                .response(new ResponseDto(RequestConstants.STATUS_200, RequestConstants.MESSAGE_200))
                .build();
    }

    private Labels findLabelByMaterial(String material, Map<String, List<Boxes>> boxesByMaterial) {
        List<Boxes> boxes = boxesByMaterial.get(material);
        return boxes.stream()
                .findFirst()
                .map(Boxes::getLabel)
                .orElseThrow(() -> new ResourceNotFoundException("Label", "material", material));
    }

    private List<Boxes> deleteCarAndRelatedDataExceptStates(Cars car) {
        log.info("Deleting car and related data (except states) for car ID: {}", car.getId());
        try {
            List<Boxes> boxes = boxesRepository.findByCarId(car.getId());
            boxesRepository.deleteByCarId(car.getId());
            log.debug("Deleted all boxes for car: {}", car.getId());

//            carStatesRepository.deleteByCarId(car.getId());
//            log.debug("Deleted all car states for car: {}", car.getId());

            carsRepository.deleteById(car.getId());
            log.debug("Deleted car: {}", car.getId());

            log.info("Successfully deleted car and related data while keeping state records");
            return boxes;
        } catch (Exception e) {
            log.error("Error deleting car and related data: {}", e.getMessage());
            throw new CarNotFoundException("Error deleting car and related data: " + e.getMessage());
        }
    }

    private void validateBoxExists(Integer carId, String labelCode) {
        if (!boxesRepository.findByCarIdAndLabelCode(carId, labelCode).isPresent()) {
            throw new BoxNotFoundException("Box not found with labelCode: " + labelCode);
        }
    }

    private void updateCarBoxCount(Cars car, int delta) {
        car.setCurrentBoxesQuantity(car.getCurrentBoxesQuantity() + delta);
    }

    private List<BoxesDTO> getCarBoxes(Integer carId) {
        return boxesRepository.findByCarId(carId)
                .stream()
                .map(TransactionMapper::mapToBoxDto)
                .collect(Collectors.toList());
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\RestTemplateConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestTemplateConfig {

    @Bean
    public RestTemplate restTemplate() {
        return new RestTemplate();
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\controller\TransactionCarController.java
/===============================================================================

package com.nirsa.solicitud.controller;

import com.nirsa.solicitud.config.CurrentUser;
import com.nirsa.solicitud.dto.*;
import com.nirsa.solicitud.dto.request.MaterialBoxesFinaliseRequestDTO;
import com.nirsa.solicitud.dto.request.TransactionCarBoxRequestDTO;
import com.nirsa.solicitud.dto.response.*;
import com.nirsa.solicitud.dto.wrapper.*;
import com.nirsa.solicitud.service.ITransactionCarService;
import com.nirsa.solicitud.service.IUtilityService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.AllArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping(path="/api/v1/transactions", produces = {MediaType.APPLICATION_JSON_VALUE})
@AllArgsConstructor
@Tag(name = "Transaction Car Operations", description = "API para la gestión de transacciones de coches y cajas")
@CrossOrigin(origins = "*", allowedHeaders = "*")
@SecurityRequirement(name = "tokenAuth")
public class TransactionCarController {

    private final ITransactionCarService transactionCarService;
    private IUtilityService utilityService;
    private CurrentUser currentUser;
    private static final Logger logger = LoggerFactory.getLogger(TransactionCarController.class);

    @Operation(summary = "Crear o actualizar transacción con cajas",
            description = "Crea una nueva transacción o actualiza una existente con cajas en un coche")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Transacción creada o actualizada exitosamente",
                    content = @Content(schema = @Schema(implementation = TransactionCarBoxResponseDTO.class))),
            @ApiResponse(responseCode = "400", description = "Datos inválidos o cantidad máxima de cajas excedida",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "404", description = "Coche no encontrado",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @PostMapping("/car/boxes")
    public ResponseEntity<TransactionCarBoxResponseDTO> createTransactionAndLoadCarWithBoxes(
            @Valid @RequestBody TransactionCarBoxRequestDTO request) {
        logger.info("Creating transaction and loading car with boxes");
        UserDTO userdto = currentUser.getCurrentUser();
        utilityService.evaluateAuthorization(userdto);
        return ResponseEntity
                .status(HttpStatus.CREATED)
                .body(transactionCarService.createTransactionAndLoadCarWithBoxes(request));
    }

    @Operation(summary = "Obtener cajas de un coche",
            description = "Muestra todas las cajas asociadas a un coche en una transacción")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Cajas obtenidas exitosamente",
                    content = @Content(schema = @Schema(implementation = TransactionCarBoxResponseDTO.class))),
            @ApiResponse(responseCode = "401", description = "No autorizado para usar el coche",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "404", description = "Coche no encontrado",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping("/car/{carCode}/boxes")
    public ResponseEntity<TransactionCarBoxResponseDTO> getCarBoxes(
            @Parameter(description = "Código del coche", example = "CAR-001", required = true)
            @PathVariable String carCode) {
        logger.info("Fetching boxes for car code: {}", carCode);
        TransactionCarBoxRequestDTO request = TransactionCarBoxRequestDTO.builder()
                .carCode(carCode)
                .build();
        return ResponseEntity.ok(transactionCarService.showBoxesOfACarAssociatedWithATransacction(request));
    }

    @Operation(summary = "Get mterial quatities per car",
            description = "Returns a list of material and theirs box quantities for a specific car")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Successfully material quentities",
                    content = @Content(schema = @Schema(implementation = MaterialBoxesInfoResponseWrapper.class))),
            @ApiResponse(responseCode = "404", description = "Car not found",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @GetMapping("/car/{carId}/materials")
    public ResponseEntity<MaterialBoxesInfoResponseWrapper> getCarMaterialsInfo(
            @Parameter(description = "Car ID", required = true)
            @PathVariable Integer carId) {
        logger.info("Fetching materials info for car: {}", carId);
        return ResponseEntity.ok(transactionCarService.additionalInformationonFinaliseMaterialPerBox(carId));}

    @Operation(summary = "Finalizar transacción de coche",
            description = "Finaliza una transacción de coche actualizando estados y versiones")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Transacción finalizada exitosamente",
                    content = @Content(schema = @Schema(implementation = MaterialBoxesCloseResponseWrapper.class))),
            @ApiResponse(responseCode = "400", description = "Datos inválidos o estado inválido",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class))),
            @ApiResponse(responseCode = "404", description = "Coche no encontrado",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @PostMapping("/car/{carId}/finalise")
    public ResponseEntity<MaterialBoxesCloseResponseWrapper> finaliseTransaction(
            @Valid @RequestBody MaterialBoxesFinaliseRequestDTO request) {
        logger.info("Finalising transaction for car: {}", request.getCarId());
        return ResponseEntity.ok(transactionCarService.finaliseOrClose(request));
    }

    @Operation(summary = "Anula transacción",
            description = "Anula a car transaction by removing all associated records and updating NIRSA status")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Transaction cancelled successfully",
                    content = @Content(schema = @Schema(implementation = TransactionCarBoxResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "Car not found",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @DeleteMapping("/car/{carId}/cancel")
    public ResponseEntity<TransactionCarBoxResponseDTO> cancelTransaction(
            @Parameter(description = "Car ID", example = "1")
            @PathVariable Integer carId) {
        return ResponseEntity.ok(transactionCarService.cancelTransaction(carId));
    }

    @Operation(summary = "Eliminar caja",
            description = "Elimina una caja específica de un coche")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Box deleted successfully",
                    content = @Content(schema = @Schema(implementation = TransactionCarBoxResponseDTO.class))),
            @ApiResponse(responseCode = "404", description = "Car or box not found",
                    content = @Content(schema = @Schema(implementation = ErrorResponseDto.class)))
    })
    @DeleteMapping("/car/{carId}/box/{labelCode}")
    public ResponseEntity<TransactionCarBoxResponseDTO> deleteBox(
            @Parameter(description = "Car ID", example = "1")
            @PathVariable Integer carId,
            @Parameter(description = "Label code", example = "197_9220")
            @PathVariable String labelCode) {
        logger.info("Deleting box from car: {}", carId);
        return ResponseEntity.ok(transactionCarService.deleteBox(carId, labelCode));
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\request\TransactionCarBoxRequestDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.request;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for transaction, car and box combined operations")
public class TransactionCarBoxRequestDTO {


    @Schema(description = "Production date (format: dd/MM/yyyy)", example = "17/12/2024")
    @NotNull(message = "Production date is required")
    private String productionDate;

    @Schema(description = "Production ID", example = "1")
    @NotNull(message = "production ID is required")
    private Integer productionId;

    @Schema(description = "turn ID", example = "1")
    @NotNull(message = "turn ID is required")
    private Integer turnId;

    @Schema(description = "Car code", example = "CL-0005")
    @NotBlank(message = "Car code is required")
    private String carCode;

    @Schema(description = "Company ID o es la misma planta", example = "1")
    @NotNull(message = "Company ID is required")
    private Integer companyId;

    @Schema(description = "Maximum boxes quantity", example = "428")
    @NotNull(message = "Maximum boxes quantity is required")
    private Integer maxBoxesQuantity;

    @Schema(description = "Label code", example = "198_2")
    @NotBlank(message = "Label code is required")
    private String labelCode;

    @Schema(description = "Es el idcoche EN NIRSA", example = "5")
    @NotBlank(message = "Label code is required")
    private String idnwcatalogocoche;

    @Schema(description = "Status code in NIRSA opcional", example = "2")
    private Integer codigo_estado;

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\entity\ClosedCars.java
/===============================================================================

package com.nirsa.solicitud.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDate;

@Entity
@Table(name = "\"Cierrecoches\"", schema = "public")
@Getter @Setter @ToString @NoArgsConstructor @AllArgsConstructor
public class ClosedCars extends BaseEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    private Integer id;

    @Column(name = "idproduccion")
    private Integer productionId;

    @Column(name = "fecha_produccion")
    private LocalDate productionDate;

    @Column(name = "idturno")
    private Integer turnId;

    @Column(name = "turno", length = 50)
    private String turn;

    @Column(name = "idempresa")
    private Integer companyId;

    @Column(name = "razonsocial", length = 70)
    private String businessName;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idtransaccion")
    private Transactions transaction;

    @Column(name = "idmaquina")
    private Integer machineId;

    @Column(name = "descripcion_maquina", length = 50)
    private String machineDescription;

    @Column(name = "idrecepcion")
    private Integer receptionId;

    @Column(name = "numero_ingreso")
    private Integer entryNumber;

    @Column(name = "numeroordenproduccion")
    private Integer productionOrderNumber;

    @Column(name = "idcajamarca")
    private Integer boxBrandId;

    @Column(name = "marca", length = 50)
    private String brand;

    @Column(name = "idclasificacionpeso")
    private Integer weightClassificationId;

    @Column(name = "empaque", length = 50)
    private String packaging;

    @Column(name = "idcalificacioncamaron")
    private Integer shrimpQualificationId;

    @Column(name = "calificacioncamaron", length = 50)
    private String shrimpQualification;

    @Column(name = "idrecepciontalla")
    private Integer receptionSizeId;

    @Column(name = "talla", length = 50)
    private String size;

    @Column(name = "idrecepciontipocamaron")
    private Integer receptionShrimpTypeId;

    @Column(name = "tipo_camaron", length = 50)
    private String shrimpType;

    @Column(name = "material", length = 50, nullable = false)
    private String material;

    @Column(name = "descripcion_material", length = 50)
    private String materialDescription;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "idcoche", nullable = false)
    private Cars car;

    @Column(name = "coche", length = 50, nullable = false)
    private String carCode;

    @Column(name = "cantidadcajas", nullable = false)
    private Integer boxesQuantity;

    @Column(name = "version", length = 50, nullable = false)
    private String version;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\repository\ClosedCarsRepository.java
/===============================================================================

package com.nirsa.solicitud.repository;

import com.nirsa.solicitud.entity.ClosedCars;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ClosedCarsRepository extends JpaRepository<ClosedCars, Integer> {
}



// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\AuthorizationException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.UNAUTHORIZED)
public class AuthorizationException extends RuntimeException {
    public AuthorizationException(String message) {
        super(message);
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\request\NirsaStatusRequestDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.request;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for NIRSA status change request")
public class NirsaStatusRequestDTO {
    @Schema(description = "Company ID", example = "1")
    private Integer idempresa;

    @Schema(description = "Car catalog ID", example = "1")
    private Integer idnwcatalogocoche;

    @Schema(description = "Tunnel ID", example = "1")
    private Integer idtunelcongelacion;

    @Schema(description = "Status code", example = "2")
    private Integer codigo_estado;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\config\NirsaConfig.java
/===============================================================================

package com.nirsa.solicitud.config;

import lombok.Getter;
import lombok.Setter;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@ConfigurationProperties(prefix = "config.baseurl.nirsa")
@Getter
@Setter
public class NirsaConfig {
    private String statusUpdate;
    private String carSearch;
    private String save;
    private String closeCar;
    private String statusUpdateTunnel;
    private String tunnelSearch;
    private String tunnelSearchById;
    private String closeTunnel;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\request\NirsaSaveCloseCarRequestDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.request;


import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import lombok.*;
@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for saving information in NIRSA")
public class NirsaSaveCloseCarRequestDTO {
    @JsonProperty("idusuario")
    private String idusuario;  // será el createdBy

    @JsonProperty("idempresa")
    private Integer idempresa;

    @JsonProperty("razonsocial")
    private String razonsocial;

    @JsonProperty("idproduccion")
    private Integer idproduccion;

    @JsonProperty("fechaproduccion")
    private String fechaproduccion;

    @JsonProperty("idturno")
    private Integer idturno;

    @JsonProperty("turno")
    private String turno;

    @JsonProperty("idmaquina")
    private Integer idmaquina;

    @JsonProperty("descripcion_maquina")
    private String descripcion_maquina;

    @JsonProperty("idrecepcion")
    private Integer idrecepcion;

    @JsonProperty("numero_ingreso")
    private Integer numero_ingreso;

    @JsonProperty("numeroordenproduccion")
    private String numeroordenproduccion;

    @JsonProperty("idcajamarca")
    private Integer idcajamarca;

    @JsonProperty("marca")
    private String marca;

    @JsonProperty("idclasificacionpeso")
    private Integer idclasificacionpeso;

    @JsonProperty("empaque")
    private String empaque;

    @JsonProperty("idcalificacioncamaron")
    private Integer idcalificacioncamaron;

    @JsonProperty("calificacioncamaron")
    private String calificacioncamaron;

    @JsonProperty("idrecepciontalla")
    private Integer idrecepciontalla;

    @JsonProperty("talla")
    private String talla;

    @JsonProperty("idrecepciontipocamaron")
    private Integer idrecepciontipocamaron;

    @JsonProperty("tipo_camaron")
    private String tipo_camaron;

    @JsonProperty("material")
    private String material;

    @JsonProperty("descripcion_material")
    private String descripcion_material;

    @JsonProperty("version")
    private String version;

    @JsonProperty("coche")
    private String coche;

    @JsonProperty("cantidad_cajas")
    private Integer cantidad_cajas;

    @JsonProperty("idtransaccion")
    private String idtransaccion;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\request\MaterialBoxesFinaliseRequestDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.request;

import com.nirsa.solicitud.dto.response.MaterialBoxesQuantityResponseDTO;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for finalise request")
public class MaterialBoxesFinaliseRequestDTO {
    @Schema(description = "Car ID", example = "32")
    @NotNull(message = "Car ID is required")
    private Integer carId;

    @Schema(description = "Finalise materials", required = true)
    private List<MaterialBoxesQuantityResponseDTO> finalise;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\response\MaterialBoxesQuantityResponseDTO.java
/===============================================================================

package com.nirsa.solicitud.dto.response;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO request for material boxes quantity information")
public class MaterialBoxesQuantityResponseDTO {

    @Schema(description = "Material", example = "10")
    private String material;

    @Schema(description = "Boxes quantity", example = "140")
    private Integer boxesQuantity;

    @Schema(description = "Version", example = "2")
    private String version;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\wrapper\MaterialBoxesCloseResponseWrapper.java
/===============================================================================

package com.nirsa.solicitud.dto.wrapper;

import com.nirsa.solicitud.dto.MaterialBoxesCarCloseDTO;
import com.nirsa.solicitud.dto.response.ResponseDto;
import lombok.*;

import java.util.List;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class MaterialBoxesCloseResponseWrapper {
    private Integer carId;
    private List<MaterialBoxesCarCloseDTO> carClose;
    private ResponseDto response;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\wrapper\MaterialBoxesInfoResponseWrapper.java
/===============================================================================

package com.nirsa.solicitud.dto.wrapper;

import com.nirsa.solicitud.dto.response.MaterialBoxesQuantityResponseDTO;
import com.nirsa.solicitud.dto.response.ResponseDto;
import lombok.*;

import java.util.List;

@Data @NoArgsConstructor
@AllArgsConstructor
@Builder
public class MaterialBoxesInfoResponseWrapper {
    private Integer carId;
    private List<MaterialBoxesQuantityResponseDTO> materials;
    private ResponseDto response;
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\MaterialBoxesCarCloseDTO.java
/===============================================================================

package com.nirsa.solicitud.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Schema(description = "DTO for material boxes quantity information")
public class MaterialBoxesCarCloseDTO {

    @Schema(description = "Car locking ID", example = "1")
    private Integer carCloseId; //validate if this is necessary

    @Schema(description = "Material", example = "10")
    private String material;

    @Schema(description = "Boxes quantity", example = "140")
    private Integer boxesQuantity;

    @Schema(description = "Version", example = "2")
    private String version;

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\utilities\TransactionUtils.java
/===============================================================================

package com.nirsa.solicitud.utilities;

import com.nirsa.solicitud.constants.RequestConstants;
import com.nirsa.solicitud.dto.BoxesDTO;
import com.nirsa.solicitud.dto.response.ResponseDto;
import com.nirsa.solicitud.dto.response.TransactionCarBoxResponseDTO;
import com.nirsa.solicitud.entity.*;
import com.nirsa.solicitud.exception.*;
import com.nirsa.solicitud.repository.*;
import com.nirsa.solicitud.service.Impl.NirsaIntegrationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.dao.IncorrectResultSizeDataAccessException;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.lang.reflect.Method;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Component
@Slf4j
@RequiredArgsConstructor
public class TransactionUtils {

    private final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd/MM/yyyy");

    // Validaciones
    public Cars validateAndGetCar(CarsRepository carsRepository, Integer carId) {
        return carsRepository.findById(carId)
                .orElseThrow(() -> new CarNotFoundException("Car not found with id: " + carId));
    }

    public Tunnels validateAndGetTunnel(TunnelsRepository tunnelsRepository, Integer tunnelId) {
        return tunnelsRepository.findById(tunnelId)
                .orElseThrow(() -> new ResourceNotFoundException("Tunnel", "id", tunnelId.toString()));
    }

    public void validateBoxesQuantity(Cars car, int maxBoxesQuantity) {
        if (car.getCurrentBoxesQuantity() >= maxBoxesQuantity) {
            throw new MaxBoxesExceededException(RequestConstants.ERROR_MAX_BOXES_EXCEEDED);
        }
    }

    public void validateCarsQuantity(Tunnels tunnel, int maxCarsQuantity) {
        if (tunnel.getCurrentCarsQuantity() >= maxCarsQuantity) {
            throw new MaxBoxesExceededException(RequestConstants.ERROR_TUNNEL_MAX_CARS);
        }
    }

    public void validateCarState(Cars car, Integer expectedState, String errorMessage) {
        if (!car.getState().getCode().equals(expectedState)) {
            throw new InvalidTransactionStateException(errorMessage);
        }
    }

    public void validateTunnelState(Tunnels tunnel, Integer expectedState, String errorMessage) {
        if (!tunnel.getState().getCode().equals(expectedState)) {
            throw new InvalidTransactionStateException(errorMessage);
        }
    }

    public void validateUserAuthorization(Cars car, String currentUserId) {
        if (!car.getCreatedBy().equals(currentUserId)) {
            throw new AuthorizationException("Usuario no autorizado para este coche");
        }
    }
    public void validateCarForFinalization(Cars car) {
        validateCarState(car, RequestConstants.STATE_OPENED_CODE, "bd Car must be in OPENED state to finalize");
        if (car.getCurrentBoxesQuantity() == 0) {
            throw new InvalidTransactionStateException("Car must have boxes to finalize");
        }
    }

    public void validateTunnelForFinalization(Tunnels tunnel) {
        validateTunnelState(tunnel, RequestConstants.TUNNEL_STATE_OPENED_CODE, "Tunnel must be in OPENED state to finalize");
        if (tunnel.getCurrentCarsQuantity() == 0) {
            throw new InvalidTransactionStateException("Tunnel must have cars to finalize");
        }
    }

    // Separar la actualización local del estado del coche
    @Transactional(propagation = Propagation.REQUIRED)
    public void updateCarStateLocal(CarsRepository carsRepository,
                                    StatesRepository statesRepository,
                                    CarStatesRepository carStatesRepository,
                                    Cars car,
                                    Integer stateCode,
                                    Integer transactionTypeCode) {

        States state = statesRepository.findByCodeAndTypeTransactionId(stateCode, transactionTypeCode)
                .orElseThrow(() -> new InvalidStateTransitionException("Invalid state code: " + stateCode));

        // Crear un nuevo registro en CarStates
        CarStates carState = new CarStates();
        carState.setIdcoche(car.getId());
        carState.setState(state);
        carStatesRepository.save(carState);

        // Actualizar el estado principal del coche
        car.setState(state);
        carsRepository.save(car);

        log.info("Updated car state locally - Car ID: {}, State: {}", car.getId(), stateCode);
    }

    @Transactional(propagation = Propagation.REQUIRED)
    public void updateTunnelStateLocal(TunnelsRepository tunnelsRepository,
                                       StatesRepository statesRepository,
                                       TunnelStatesRepository tunnelStatesRepository,
                                       Tunnels tunnel,
                                       Integer stateCode,
                                       Integer transactionTypeCode) {

        States state = statesRepository.findByCodeAndTypeTransactionId(stateCode, transactionTypeCode)
                .orElseThrow(() -> new InvalidStateTransitionException("Invalid state code: " + stateCode));

        // Crear registro en TunnelStates
        TunnelStates tunnelState = new TunnelStates();
        tunnelState.setTunnelId(tunnel.getId());
        tunnelState.setState(state);
        tunnelStatesRepository.save(tunnelState);

        // Actualizar estado del túnel
        tunnel.setState(state);
        tunnelsRepository.save(tunnel);

        log.info("Updated tunnel state locally - Tunnel ID: {}, State: {}", tunnel.getId(), stateCode);
    }

    // Método para actualizar el estado en NIRSA
    public void updateCarStateInNirsa(NirsaIntegrationService nirsaIntegrationService,
                                      Cars car,
                                      Integer stateCode,
                                      String token) {
        try {
            // 5. Sincronizar con Nirsa
            nirsaIntegrationService.updateCarStatus(
                    car.getTransaction().getCompanyId(),
                    car.getIdnwcatalogocoche(),
                    stateCode,
                    token
            );
            log.info("Updated car state in NIRSA - Car ID: {}, State: {}", car.getId(), stateCode);
        } catch (Exception e) {
            log.error("Failed to update car state in NIRSA - Car ID: {}, State: {}, Error: {}",
                    car.getId(), stateCode, e.getMessage());
            throw e; // Re-lanzar para que pueda ser manejada por el método que llama
        }
    }

    public void updateTunnelStateInNirsa(NirsaIntegrationService nirsaIntegrationService,
                                         Tunnels tunnel,
                                         Integer stateCode,
                                         String token) {
        try {
            nirsaIntegrationService.updateTunnelStatus(
                    tunnel.getTransaction().getCompanyId(),
                    tunnel.getTunnelCode(),
                    stateCode,
                    token
            );
            log.info("Updated tunnel state in NIRSA - Tunnel ID: {}, State: {}", tunnel.getId(), stateCode);
        } catch (Exception e) {
            log.error("Failed to update tunnel state in NIRSA - Tunnel ID: {}, State: {}, Error: {}",
                    tunnel.getId(), stateCode, e.getMessage());
            throw e;
        }
    }

    // Método para compensar en caso de error
    public void compensateCarStateInNirsa(NirsaIntegrationService nirsaIntegrationService,
                                          Cars car,
                                          Integer previousStateCode,
                                          String token) {
        try {
            log.warn("Attempting to compensate for failed operation by restoring previous state in NIRSA - Car ID: {}, State: {}",
                    car.getId(), previousStateCode);

            nirsaIntegrationService.updateCarStatus(
                    car.getTransaction().getCompanyId(),
                    car.getIdnwcatalogocoche(),
                    previousStateCode,
                    token
            );

            log.info("Successfully compensated car state in NIRSA - Car ID: {}, Reverted to State: {}",
                    car.getId(), previousStateCode);
        } catch (Exception e) {
            log.error("Failed to compensate car state in NIRSA - Car ID: {}, State: {}, Error: {}",
                    car.getId(), previousStateCode, e.getMessage());
            // No relanzamos la excepción para evitar ocultar la excepción original
        }
    }

    public void compensateTunnelStateInNirsa(NirsaIntegrationService nirsaIntegrationService,
                                             Tunnels tunnel,
                                             Integer previousStateCode,
                                             String token) {
        try {
            log.warn("Attempting to compensate for failed operation by restoring previous state in NIRSA - Tunnel ID: {}, State: {}",
                    tunnel.getId(), previousStateCode);

            nirsaIntegrationService.updateTunnelStatus(
                    tunnel.getTransaction().getCompanyId(),
                    tunnel.getTunnelCode(),
                    previousStateCode,
                    token
            );

            log.info("Successfully compensated tunnel state in NIRSA - Tunnel ID: {}, Reverted to State: {}",
                    tunnel.getId(), previousStateCode);
        } catch (Exception e) {
            log.error("Failed to compensate tunnel state in NIRSA - Tunnel ID: {}, State: {}, Error: {}",
                    tunnel.getId(), previousStateCode, e.getMessage());
            // No relanzamos la excepción para evitar ocultar la excepción original
        }
    }

    // Método orquestador que utiliza los métodos separados
    // Métodos de orquestación para actualizar estado (métodos obsoletos, mantenidos por compatibilidad)
    public void updateCarState(CarsRepository carsRepository,
                               StatesRepository statesRepository,
                               CarStatesRepository carStatesRepository,
                               NirsaIntegrationService nirsaIntegrationService,
                               Cars car,
                               Integer stateCode,
                               Integer transactionTypeCode,
                               String token) {

        log.info("Updating car state - Car ID: {}, New State: {}", car.getId(), stateCode);

        // Actualizar estado local
        updateCarStateLocal(carsRepository, statesRepository, carStatesRepository, car, stateCode, transactionTypeCode);

        // Actualizar estado en NIRSA
        updateCarStateInNirsa(nirsaIntegrationService, car, stateCode, token);
    }

    public void updateTunnelState(TunnelsRepository tunnelsRepository,
                                  StatesRepository statesRepository,
                                  TunnelStatesRepository tunnelStatesRepository,
                                  NirsaIntegrationService nirsaIntegrationService,
                                  Tunnels tunnel,
                                  Integer stateCode,
                                  Integer transactionTypeCode,
                                  String token) {

        log.info("Updating tunnel state - Tunnel ID: {}, New State: {}", tunnel.getId(), stateCode);

        // Actualizar estado local
        updateTunnelStateLocal(tunnelsRepository, statesRepository, tunnelStatesRepository, tunnel, stateCode, transactionTypeCode);

        // Actualizar estado en NIRSA
        updateTunnelStateInNirsa(nirsaIntegrationService, tunnel, stateCode, token);
    }


    public void validateCarInNirsa(NirsaIntegrationService nirsaIntegrationService, Cars car, String token) {
        try {
            nirsaIntegrationService.searchCar(
                    car.getTransaction().getCompanyId(),
                    car.getCarCode(),
                    token
            );
            log.info("Successfully validated car in NIRSA - Car ID: {}", car.getId());
        } catch (Exception e) {
            log.error("Failed to validate car in NIRSA - Car ID: {}, Error: {}", car.getId(), e.getMessage());
            throw new NirsaIntegrationException("Error validating car in NIRSA: " + e.getMessage());
        }
    }

    public void validateTunnelInNirsa(NirsaIntegrationService nirsaIntegrationService, Tunnels tunnel, String token) {
        try {
            nirsaIntegrationService.searchTunnelById(
                    Integer.valueOf(tunnel.getTunnelCode()),
                    token
            );
            log.info("Successfully validated tunnel in NIRSA - Tunnel ID: {}", tunnel.getId());
        } catch (Exception e) {
            log.error("Failed to validate tunnel in NIRSA - Tunnel ID: {}, Error: {}", tunnel.getId(), e.getMessage());
            throw new NirsaIntegrationException("Error validating tunnel in NIRSA: " + e.getMessage());
        }
    }

    // Utilidades de parseo y conversión
    public LocalDate parseDate(String date) {
        return LocalDate.parse(date, DATE_FORMATTER);
    }

    public TransactionCarBoxResponseDTO createTransactionCarBoxResponse(
            Cars car,
            List<BoxesDTO> boxes,
            String statusCode,
            String message) {
        return TransactionCarBoxResponseDTO.builder()
                .transactionId(car.getTransaction().getId())
                .productionDate(car.getTransaction().getProductionDate().format(DATE_FORMATTER))
                .turnId(car.getTransaction().getTurnId())
                .carId(car.getId())
                .boxes(boxes)
                .carStateId(car.getState().getId())
                .currentBoxesQuantity(car.getCurrentBoxesQuantity())
                .response(new ResponseDto(statusCode, message))
                .build();
    }

    public Transactions findOrCreateTransaction(TransactionsRepository transactionsRepository,
                                                Integer companyId, String productionDate,
                                                Integer turnId, Integer productionId, Integer typeTransactionId) {
        try {
            LocalDate parsedDate = parseDate(productionDate);
            return transactionsRepository.findExistingTransaction(
                    companyId, parsedDate, turnId, typeTransactionId
            ).orElseGet(() -> {
                Transactions newTransaction = new Transactions();
                newTransaction.setCompanyId(companyId);
                newTransaction.setProductionDate(parsedDate);
                newTransaction.setTurnId(turnId);
                newTransaction.setProductionId(productionId);
                newTransaction.setTypeTransactionId(typeTransactionId);
                return transactionsRepository.save(newTransaction);
            });
        } catch (IncorrectResultSizeDataAccessException e) {
            throw new NonUniqueResultException(
                    "Transaction",
                    RequestConstants.ERROR_TRANSACTION_CRITERIA,
                    String.format("%d, %s, %d, %d", companyId, productionDate, turnId, typeTransactionId),
                    e // Pasamos la excepción original
            );
        }
    }

    public <T> void updateEntityCount(T entity, int delta, String countField) {
        try {
            Method getMethod = entity.getClass().getMethod("get" + countField);
            Method setMethod = entity.getClass().getMethod("set" + countField, Integer.class);

            Integer currentCount = (Integer) getMethod.invoke(entity);
            setMethod.invoke(entity, currentCount + delta);
        } catch (Exception e) {
            throw new RuntimeException("Error updating count: " + countField, e);
        }
    }

}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\service\Impl\NirsaIntegrationService.java
/===============================================================================

package com.nirsa.solicitud.service.Impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.nirsa.solicitud.config.NirsaConfig;
import com.nirsa.solicitud.dto.request.*;
import com.nirsa.solicitud.dto.response.NirsaResponse;
import com.nirsa.solicitud.exception.NirsaIntegrationException;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.*;
import org.springframework.http.client.SimpleClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.util.List;
import java.util.Map;

@Service
@Slf4j
@AllArgsConstructor
public class NirsaIntegrationService {
    private final RestTemplate restTemplate;
    private final NirsaConfig nirsaConfig;
    private final ObjectMapper objectMapper;

    public void updateCarStatus(Integer companyId, String idNwCatalogoCoche, Integer statusCode, String token) {
        log.info("Updating car status in NIRSA - Company: {}, Car: {}, Status: {}",
                companyId, idNwCatalogoCoche, statusCode);

        NirsaStatusRequestDTO request = NirsaStatusRequestDTO.builder()
                .idempresa(companyId)
                .idnwcatalogocoche(Integer.valueOf(idNwCatalogoCoche))
                .codigo_estado(statusCode)
                .build();

        try {
            executeNirsaRequest(
                    nirsaConfig.getStatusUpdate(),
                    request,
                    token,
                    "Error actualizando estado de coche en NIRSA"
            );
            log.info("Successfully updated car status in NIRSA - Car: {}, Status: {}",
                    idNwCatalogoCoche, statusCode);
        } catch (Exception e) {
            log.error("Failed to update car status in NIRSA - Car: {}, Status: {}, Error: {}",
                    idNwCatalogoCoche, statusCode, e.getMessage());
            throw new NirsaIntegrationException("Error updating car status in NIRSA: " + e.getMessage());
        }
    }

    public void updateTunnelStatus(Integer companyId, String tunnelCode, Integer statusCode, String token) {
        log.info("Updating tunnel status in NIRSA - Company: {}, Tunnel: {}, Status: {}",
                companyId, tunnelCode, statusCode);

        NirsaStatusRequestDTO request = NirsaStatusRequestDTO.builder()
                .idempresa(companyId)
                .idtunelcongelacion(Integer.valueOf(tunnelCode))  // Cambiamos idnwcatalogocoche por idtunelcongelacion para túneles
                .codigo_estado(statusCode)
                .build();

        try {
            executeNirsaRequest(
                    nirsaConfig.getStatusUpdateTunnel(),
                    request,
                    token,
                    "Error updating tunnel status in NIRSA"
            );
            log.info("Successfully updated tunnel status in NIRSA - Tunnel: {}, Status: {}",
                    tunnelCode, statusCode);
        } catch (Exception e) {
            log.error("Failed to update tunnel status in NIRSA - Tunnel: {}, Status: {}, Error: {}",
                    tunnelCode, statusCode, e.getMessage());
            throw new NirsaIntegrationException("Error updating tunnel status in NIRSA: " + e.getMessage());
        }
    }

    public void searchCar(Integer companyId, String carCode, String token) {
        log.info("Searching car in NIRSA - Company: {}, Car Code: {}", companyId, carCode);

        Map<String, Object> request = Map.of(
                "idempresa", companyId,
                "estado_coche", "",
                "criterioBusqueda", carCode
        );

        try {
            executeNirsaRequest(
                    nirsaConfig.getCarSearch(),
                    request,
                    token,
                    "Error searching car in NIRSA"
            );
            log.info("Successfully found car in NIRSA - Car Code: {}", carCode);
        } catch (Exception e) {
            log.error("Failed to find car in NIRSA - Car Code: {}, Error: {}", carCode, e.getMessage());
            throw new NirsaIntegrationException("Error searching car in NIRSA: " + e.getMessage());
        }
    }

    private void executeNirsaRequest(String url, Object request, String token, String errorMessage) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.add("Authorization", "Bearer " + token);

            HttpEntity<?> entity = new HttpEntity<>(request, headers);
            ResponseEntity<String> response = restTemplate.postForEntity(url, entity, String.class);

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new NirsaIntegrationException(errorMessage + " - Status: " + response.getStatusCode());
            }

            // Verificar la respuesta del cuerpo para buscar errores a nivel de aplicación
            if (response.getBody() != null && !response.getBody().isEmpty()) {
                try {
                    NirsaResponse nirsaResponse = objectMapper.readValue(response.getBody(), NirsaResponse.class);
                    handleNirsaResponse(nirsaResponse);
                } catch (JsonProcessingException e) {
                    log.warn("Unable to parse NIRSA response as expected format: {}", e.getMessage());
                    // Continue if we can't parse the response - it might not be in the expected format
                }
            }

        } catch (Exception e) {
            log.error("{}: {}", errorMessage, e.getMessage());
            throw new NirsaIntegrationException(errorMessage + ": " + e.getMessage());
        }
    }

    public void saveClosedCarsInNirsa(List<NirsaSaveCloseCarRequestDTO> closedCarsData, String token) {
        log.info("Saving {} closed cars in NIRSA", closedCarsData.size());
        try {
            // Convert closedCarsData to JSON string
            String jsonRequest = objectMapper.writeValueAsString(closedCarsData);
            log.info("NIRSA request payload: {}", jsonRequest);

            HttpHeaders headers = createHeaders(token);
            configureRestTemplate();

            HttpEntity<List<NirsaSaveCloseCarRequestDTO>> request =
                    new HttpEntity<>(closedCarsData, headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    nirsaConfig.getCloseCar(),
                    HttpMethod.POST,
                    request,
                    String.class
            );

            log.debug("NIRSA response status code: {}", response.getStatusCode());
            log.debug("NIRSA response body: {}", response.getBody());

            NirsaResponse nirsaResponse = parseAndValidateResponse(response);
            handleNirsaResponse(nirsaResponse);

            log.info("Successfully saved {} closed cars in NIRSA", closedCarsData.size());

        } catch (Exception e) {
            log.error("Error saving closed cars in NIRSA: {}", e.getMessage());
            throw new NirsaIntegrationException("Error saving closed cars in NIRSA: " + e.getMessage());
        }
    }

    public void saveClosedTunnelsInNirsa(List<NirsaSaveCloseTunnelRequestDTO> closedTunnelsData, String token) {
        log.info("Saving {} closed tunnels in NIRSA", closedTunnelsData.size());
        try {
            // Convert closedTunnelsData to JSON string
            String jsonRequest = objectMapper.writeValueAsString(closedTunnelsData);
            log.debug("NIRSA tunnel closure request payload: {}", jsonRequest);

            HttpHeaders headers = createHeaders(token);
            configureRestTemplate();

            HttpEntity<List<NirsaSaveCloseTunnelRequestDTO>> request =
                    new HttpEntity<>(closedTunnelsData, headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    nirsaConfig.getCloseTunnel(),
                    HttpMethod.POST,
                    request,
                    String.class
            );

            log.debug("NIRSA response status code: {}", response.getStatusCode());
            log.debug("NIRSA response body: {}", response.getBody());

            NirsaResponse nirsaResponse = parseAndValidateResponse(response);
            handleNirsaResponse(nirsaResponse);

            log.info("Successfully saved {} closed tunnels in NIRSA", closedTunnelsData.size());

        } catch (Exception e) {
            log.error("Error saving closed tunnels in NIRSA: {}", e.getMessage());
            throw new NirsaIntegrationException("Error saving closed tunnels in NIRSA: " + e.getMessage());
        }
    }


    private HttpHeaders createHeaders(String token) {
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", "Bearer " + token);
        return headers;
    }

    private void configureRestTemplate() {
        SimpleClientHttpRequestFactory requestFactory = new SimpleClientHttpRequestFactory();
        requestFactory.setConnectTimeout(10000);  // 10 segundos timeout conexión
        requestFactory.setReadTimeout(10000);     // 10 segundos timeout lectura
        ((RestTemplate) restTemplate).setRequestFactory(requestFactory);
    }

    private NirsaResponse parseAndValidateResponse(ResponseEntity<String> response) throws JsonProcessingException {
        log.debug("NIRSA raw response: {}", response.getBody());

        if (!response.getStatusCode().is2xxSuccessful()) {
            throw new NirsaIntegrationException("Failed to connect with NIRSA system. Status: " + response.getStatusCode());
        }

        if (response.getBody() == null || response.getBody().isEmpty()) {
            throw new NirsaIntegrationException("Empty response received from NIRSA");
        }

        NirsaResponse nirsaResponse = objectMapper.readValue(response.getBody(), NirsaResponse.class);
        log.info("Parsed NIRSA response: {}", nirsaResponse);
        return nirsaResponse;
    }

    private void handleNirsaResponse(NirsaResponse nirsaResponse) {
        if (nirsaResponse == null || nirsaResponse.getInfoproduccion() == null) {
            log.warn("No valid response data from NIRSA");
            return;
        }

        NirsaResponse.InfoProduccion info = nirsaResponse.getInfoproduccion();

        // Log detallado de la respuesta
        log.info("NIRSA response details - Code: {}, Type: {}, Message: {}",
                info.getCodigo(), info.getMensajetipo(), info.getMensaje());

        String messageType = info.getMensajetipo() != null ? info.getMensajetipo().toLowerCase() : "unknown";

        switch (messageType) {
            case "success":
                if (info.getCodigo() != null && info.getCodigo() != 1) {
                    logAndThrowError(info);
                }
                break;
            case "warning":
                handleWarning(info);
                break;
            case "error":
                logAndThrowError(info);
                break;
            default:
                log.warn("Unexpected response type from NIRSA: {}", messageType);
                if (info.getCodigo() == null || info.getCodigo() != 1) {
                    throw new NirsaIntegrationException("Unexpected response from NIRSA: " + info.getMensaje());
                }
        }
    }

    private void handleWarning(NirsaResponse.InfoProduccion info) {
        // En el caso de warning por fecha de aguaje, podemos manejarlo según los requisitos
        if (info.getMensaje() != null &&
                (info.getMensaje().contains("fecha de producción") &&
                        info.getMensaje().contains("Aguaje"))) {
            log.warn("Warning from NIRSA (Aguaje): {}", info.getMensaje());
        } else {
            log.warn("Warning from NIRSA: {}", info.getMensaje());
        }
    }

    private void logAndThrowError(NirsaResponse.InfoProduccion info) {
        String errorMessage = String.format("NIRSA integration error: Code=%d, Type=%s, Message=%s",
                info.getCodigo(), info.getMensajetipo(), info.getMensaje());
        log.error(errorMessage);
        throw new NirsaIntegrationException(errorMessage);
    }

    public void searchTunnelById(Integer tunnelId, String token) {
        log.info("Searching tunnel in NIRSA - Tunnel ID: {}", tunnelId);

        try {
            String url = nirsaConfig.getTunnelSearchById()
                    .replace("{idtunelcongelacion}", tunnelId.toString());

            HttpHeaders headers = createHeaders(token);
            HttpEntity<?> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.GET,
                    entity,
                    String.class
            );

            if (!response.getStatusCode().is2xxSuccessful()) {
                throw new NirsaIntegrationException("Error searching tunnel in NIRSA - Status code: " + response.getStatusCode());
            }
            log.info("Successfully found tunnel in NIRSA - Tunnel ID: {}", tunnelId);
        } catch (Exception e) {
            log.error("Failed to find tunnel in NIRSA - Tunnel ID: {}, Error: {}", tunnelId, e.getMessage());
            throw new NirsaIntegrationException("Error searching tunnel in NIRSA: " + e.getMessage());
        }
    }


}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\dto\response\NirsaResponse.java
/===============================================================================

package com.nirsa.solicitud.dto.response;

import lombok.*;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
public class NirsaResponse {
    private InfoProduccion infoproduccion;

    @Data
    @NoArgsConstructor
    @AllArgsConstructor
    @Builder
    public static class InfoProduccion {
        private Integer codigo;
        private String mensajetipo;
        private String mensaje;
    }
}


// File: C:\ProyectsSoftware\NIRSA\nw.servicio.solicitud\src\main\java\com\nirsa\solicitud\exception\NonUniqueResultException.java
/===============================================================================

package com.nirsa.solicitud.exception;

import com.nirsa.solicitud.constants.RequestConstants;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

@ResponseStatus(value = HttpStatus.CONFLICT)
public class NonUniqueResultException extends RuntimeException {
    private final Exception originalException;

    public NonUniqueResultException(String message) {
        super(message);
        this.originalException = null;
    }

    public NonUniqueResultException(String message, Exception originalException) {
        super(message);
        this.originalException = originalException;
    }

    public NonUniqueResultException(String resourceName, String fieldName, String fieldValue, Exception originalException) {
        super(String.format(RequestConstants.ERROR_NON_UNIQUE_RESULT + ": Found multiple %s with %s: '%s'", resourceName, fieldName, fieldValue));
        this.originalException = originalException;
    }

    public Exception getOriginalException() {
        return originalException;
    }
}

